{"version":3,"sources":["webpack:///./node_modules/isarray/index.js","webpack:///./src/components/Nav.js","webpack:///./src/components/Comment.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.typed.uint8-array.js","webpack:///./node_modules/base64-js/index.js","webpack:///./node_modules/node-libs-browser/node_modules/buffer/index.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.typed.uint8-clamped-array.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.object.prevent-extensions.js","webpack:///./src/components/FeedbackReward.js","webpack:///./src/components/License.js","webpack:///./src/components/photo-viewer/Viewer.js","webpack:///./node_modules/moment/locale/zh-cn.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.object.is-extensible.js","webpack:///./node_modules/ieee754/index.js","webpack:///./src/components/photo-viewer/GoogleMapIcon.js","webpack:///./src/components/photo-viewer/BaiduMapIcon.js","webpack:///./src/components/photo-viewer/ExifList.js","webpack:///./src/components/photo-viewer/PhotoViewer.js","webpack:///./src/components/Photo.js","webpack:///./src/templates/photo.js"],"names":["toString","module","exports","Array","isArray","arr","call","Container","styled","div","rhythm","StyledLink","Link","Image","img","withContext","article","context","page","previous","next","to","fields","url","type","id","title","childImageExt","tinyImg","alt","src","jpg","props","show","Comment","componentDidMount","this","gitalk","render","location","pathname","$container","$","indexOf","window","hostname","Gitalk","clientID","clientSecret","repo","owner","admin","substr","distractionFreeMode","html","React","Component","init","data","byteOffset","length","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","i","Arr","_byteLength","curByte","len","revLookup","charCodeAt","fromByteArray","uint8","extraBytes","parts","len2","push","encodeChunk","lookup","join","Uint8Array","code","Error","start","end","num","output","base64","ieee754","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","prototype","arg","encodingOrOffset","allocUnsafe","from","value","TypeError","ArrayBuffer","array","undefined","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","slice","fromString","obj","isBuffer","checked","copy","buffer","val","fromObject","assertSize","size","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","b","n","m","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","String","read","buf","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","c","hi","lo","utf16leToBytes","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","global","foo","subarray","e","typedArraySupport","poolSize","_augment","Symbol","species","Object","defineProperty","configurable","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","arguments","equals","inspect","max","match","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","INVALID_BASE64_RE","Infinity","leadSurrogate","trim","replace","stringtrim","base64clean","dst","isObject","meta","onFreeze","$preventExtensions","it","random","begin","animHover","keyframes","map","_","Button","button","theme","light","LIGHT","REWARD","BUTTON","FG","dark","DARK","BG","isHover","brighten","RewardWrapper","transition","RewardWeixin","RewardAlipay","FeedbackReward","onMouseEnter","preventDefault","delaySet","clearTimeout","setState","onMouseOut","setTimeout","onClick","isExpand","state","collapse","qrCodeContainer","createRef","textList","query","in","unmountOnExit","timeout","site","siteMetadata","qrcode","rewardWeixin","rewardAlipay","LICENSE","BAR","align","author","name","href","hex","v","toColor","Cell","ctx","cx","cy","width","height","color","scale","rx","ry","handleColor","draw","fillStyle","fillRect","reset","animate","time","progress","delta","sqrt","degrees","atan2","PI","c1","chroma","desaturate","E","sin","Viewer","canvas","smallImg","changeBlur","loop","animated","requestAnimationFrame","getContext","image","startLoop","tinyImgToCells","setProgress","setPhotoImage","cells","drawPhoto","drawCells","t","sorted","resetCells","rawBufferToCells","raw","channels","rw","rh","pixels","smallImgToCells","drawImage","performance","now","beginTime","moment","defineLocale","months","split","monthsShort","weekdays","weekdaysShort","weekdaysMin","longDateFormat","LT","LTS","L","LL","LLL","LLLL","l","ll","lll","llll","meridiemParse","meridiemHour","hour","meridiem","minute","isLower","hm","calendar","sameDay","nextDay","nextWeek","lastDay","lastWeek","sameElse","dayOfMonthOrdinalParse","ordinal","number","period","relativeTime","future","past","s","ss","mm","h","hh","d","dd","M","MM","yy","week","dow","doy","factory","$isExtensible","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","log","LN2","GoogleMapIcon","version","xmlns","viewBox","style","enableBackground","r","BaiduMapIcon","stroke","fill-rule","Pair","Name","Value","GPSPair","GPSCol","GPSValue","makeGoogleMapUrl","gps","latitude","toFixed","longitude","ExifList","metadata","photo","CreateDate","format","encodeURI","Make","Model","LensModel","ExposureTime","ExposureMode","ExposureProgram","ISO","ApertureValue","calcAperture","MaxApertureValue","calcMaxAperture","FocalLength","FocalLengthIn35mmFormat","Software","axios","Axios","create","Canvas","blur","FullViewerWrapper","FullViewer","PhotoViewer","toggleFullViewer","imageSrc","showFullViewer","containerRef","canvasRef","loaded","loadImage","self","source","CancelToken","cancel","get","publicURL","onDownloadProgress","onProgress","total","responseType","cancelToken","token","then","resp","status","blobToSrc","viewer","onload","catch","message","console","error","update","current","getBoundingClientRect","componentDidUpdate","lastPhotoId","ref","Title","h1","Description","p","Subtitle","SEOKeywords","Photo","keywords","date","description","showComments","Icon","k","key","License","Nav","pageQuery","PhotoTemplate","pageContext","allFile","edges","node"],"mappings":"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","file":"component---src-templates-photo-js-6dba34ea7c335921571b.js","sourcesContent":["require(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport styled from \"styled-components\"\nimport { rhythm, scale } from \"../utils/typography\"\n\nimport { withContext } from \"./ContextProvider\"\n\nimport Icon from \"./Icon\"\n\nconst Container = styled.div`\n  margin: ${rhythm(0.5)} 0;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`\n\nconst StyledLink = styled(Link)`\n  max-width: 40vw;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`\n\nconst Image = styled.img`\n  width: 60px;\n  height: auto;\n  margin: 0;\n`\n\nconst Nav = ({ article, context }) => {\n  const { page = {} } = context\n  const { previous, next } = page\n  return (\n    <Container>\n      {previous && (\n        <StyledLink to={previous.fields.url}>\n          <Icon type=\"s\" id=\"arrow-left\" />\n          {previous.fields.title && <span>{previous.fields.title}</span>}\n          {previous.childImageExt && previous.childImageExt.tinyImg && (\n            <Image\n              alt=\"previous photo\"\n              src={`data:image/jpg;base64, ${previous.childImageExt.tinyImg.jpg}`}\n            />\n          )}\n        </StyledLink>\n      ) || <div></div>}\n      {next && (\n        <StyledLink to={next.fields.url}>\n          {next.fields.title && <span>{next.fields.title}</span>}\n          {next.childImageExt && next.childImageExt.tinyImg && (\n            <Image\n              alt=\"next photo\"\n              src={`data:image/jpg;base64, ${next.childImageExt.tinyImg.jpg}`}\n            />\n          )}\n          <Icon type=\"s\" id=\"arrow-right\" />\n        </StyledLink>\n      )}\n    </Container>\n  )\n}\n\nexport default withContext(Nav)\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport * as $ from \"jquery\"\n\nimport styled from \"styled-components\"\nimport { rhythm, scale } from \"../utils/typography\"\nimport Gitalk from \"gitalk\"\n\nconst Container = styled.div`\n  display: ${props => (props.show ? \"block\" : \"none\")};\n`\n\nclass Comment extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  componentDidMount() {\n    if (this.gitalk) {\n      this.gitalk.render(\"gitalk-container\")\n      return\n    }\n    const { id = location.pathname } = this.props\n    const $container = $(\"#gitalk-container\")\n    if ([\"localhost\", \"127.0.0.1\"].indexOf(window.location.hostname) != -1) {\n      $container.html(\n        \"Gitalk comments not available by default when the website is previewed locally.\"\n      )\n      return\n    }\n    if (!this.gitalk) {\n      this.gitalk = new Gitalk({\n        clientID: \"8b460a9d68322500a100\",\n        clientSecret: \"926c457c4295803c58f53b7c20ec366c8792a996\",\n        repo: \"tajoy.github.io\",\n        owner: \"tajoy\",\n        admin: [\"tajoy\"],\n        id: id.substr(0, 50), // Ensure uniqueness and length less than 50\n        distractionFreeMode: false, // Facebook-like distraction free mode\n      })\n    }\n    this.gitalk.render(\"gitalk-container\")\n  }\n\n  render() {\n    const { show } = this.props\n    // console.log(\"showComments\", show)\n    return <Container id=\"gitalk-container\" show={show}></Container>\n  }\n}\n\nexport default Comment\n","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","'use strict';\n\nrequire(\"core-js/modules/es6.array.index-of\");\n\nrequire(\"core-js/modules/es6.typed.uint8-array\");\n\nexports.byteLength = byteLength;\nexports.toByteArray = toByteArray;\nexports.fromByteArray = fromByteArray;\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i];\n  revLookup[code.charCodeAt(i)] = i;\n} // Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\n\n\nrevLookup['-'.charCodeAt(0)] = 62;\nrevLookup['_'.charCodeAt(0)] = 63;\n\nfunction getLens(b64) {\n  var len = b64.length;\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4');\n  } // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n\n\n  var validLen = b64.indexOf('=');\n  if (validLen === -1) validLen = len;\n  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n  return [validLen, placeHoldersLen];\n} // base64 is 4/3 + up to two characters of the original data\n\n\nfunction byteLength(b64) {\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\n\nfunction _byteLength(b64, validLen, placeHoldersLen) {\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\n\nfunction toByteArray(b64) {\n  var tmp;\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars\n\n  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n  var i;\n\n  for (i = 0; i < len; i += 4) {\n    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n    arr[curByte++] = tmp >> 16 & 0xFF;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  return arr;\n}\n\nfunction tripletToBase64(num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n}\n\nfunction encodeChunk(uint8, start, end) {\n  var tmp;\n  var output = [];\n\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n    output.push(tripletToBase64(tmp));\n  }\n\n  return output.join('');\n}\n\nfunction fromByteArray(uint8) {\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n  // go through the array every three bytes, we'll deal with trailing stuff later\n\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n  } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');\n  }\n\n  return parts.join('');\n}","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n\n/* eslint-disable no-proto */\n'use strict';\n\nrequire(\"core-js/modules/es6.string.trim\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.date.to-json\");\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nrequire(\"core-js/modules/es6.array.last-index-of\");\n\nrequire(\"core-js/modules/es6.array.index-of\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.array.fill\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.typed.uint8-array\");\n\nvar base64 = require('base64-js');\n\nvar ieee754 = require('ieee754');\n\nvar isArray = require('isarray');\n\nexports.Buffer = Buffer;\nexports.SlowBuffer = SlowBuffer;\nexports.INSPECT_MAX_BYTES = 50;\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\n\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();\n/*\n * Export kMaxLength after typed array support is determined.\n */\n\nexports.kMaxLength = kMaxLength();\n\nfunction typedArraySupport() {\n  try {\n    var arr = new Uint8Array(1);\n    arr.__proto__ = {\n      __proto__: Uint8Array.prototype,\n      foo: function foo() {\n        return 42;\n      }\n    };\n    return arr.foo() === 42 && // typed array instances can be augmented\n    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction kMaxLength() {\n  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;\n}\n\nfunction createBuffer(that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length');\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length);\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length);\n    }\n\n    that.length = length;\n  }\n\n  return that;\n}\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\n\nfunction Buffer(arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length);\n  } // Common case.\n\n\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error('If encoding is specified then the first argument must be a string');\n    }\n\n    return allocUnsafe(this, arg);\n  }\n\n  return from(this, arg, encodingOrOffset, length);\n}\n\nBuffer.poolSize = 8192; // not used by this implementation\n// TODO: Legacy, not needed anymore. Remove in next major version.\n\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype;\n  return arr;\n};\n\nfunction from(that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length);\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset);\n  }\n\n  return fromObject(that, value);\n}\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\n\n\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length);\n};\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype;\n  Buffer.__proto__ = Uint8Array;\n\n  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    });\n  }\n}\n\nfunction assertSize(size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number');\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative');\n  }\n}\n\nfunction alloc(that, size, fill, encoding) {\n  assertSize(size);\n\n  if (size <= 0) {\n    return createBuffer(that, size);\n  }\n\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);\n  }\n\n  return createBuffer(that, size);\n}\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\n\n\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding);\n};\n\nfunction allocUnsafe(that, size) {\n  assertSize(size);\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0;\n    }\n  }\n\n  return that;\n}\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\n\n\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size);\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\n\n\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size);\n};\n\nfunction fromString(that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding');\n  }\n\n  var length = byteLength(string, encoding) | 0;\n  that = createBuffer(that, length);\n  var actual = that.write(string, encoding);\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual);\n  }\n\n  return that;\n}\n\nfunction fromArrayLike(that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  that = createBuffer(that, length);\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255;\n  }\n\n  return that;\n}\n\nfunction fromArrayBuffer(that, array, byteOffset, length) {\n  array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds');\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds');\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array);\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset);\n  } else {\n    array = new Uint8Array(array, byteOffset, length);\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array;\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array);\n  }\n\n  return that;\n}\n\nfunction fromObject(that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    that = createBuffer(that, len);\n\n    if (that.length === 0) {\n      return that;\n    }\n\n    obj.copy(that, 0, 0, len);\n    return that;\n  }\n\n  if (obj) {\n    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0);\n      }\n\n      return fromArrayLike(that, obj);\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data);\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');\n}\n\nfunction checked(length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');\n  }\n\n  return length | 0;\n}\n\nfunction SlowBuffer(length) {\n  if (+length != length) {\n    // eslint-disable-line eqeqeq\n    length = 0;\n  }\n\n  return Buffer.alloc(+length);\n}\n\nBuffer.isBuffer = function isBuffer(b) {\n  return !!(b != null && b._isBuffer);\n};\n\nBuffer.compare = function compare(a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers');\n  }\n\n  if (a === b) return 0;\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n};\n\nBuffer.isEncoding = function isEncoding(encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true;\n\n    default:\n      return false;\n  }\n};\n\nBuffer.concat = function concat(list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers');\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0);\n  }\n\n  var i;\n\n  if (length === undefined) {\n    length = 0;\n\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\n    }\n\n    buf.copy(buffer, pos);\n    pos += buf.length;\n  }\n\n  return buffer;\n};\n\nfunction byteLength(string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length;\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength;\n  }\n\n  if (typeof string !== 'string') {\n    string = '' + string;\n  }\n\n  var len = string.length;\n  if (len === 0) return 0; // Use a for loop to avoid recursion\n\n  var loweredCase = false;\n\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len;\n\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length;\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2;\n\n      case 'hex':\n        return len >>> 1;\n\n      case 'base64':\n        return base64ToBytes(string).length;\n\n      default:\n        if (loweredCase) return utf8ToBytes(string).length; // assume utf8\n\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\nBuffer.byteLength = byteLength;\n\nfunction slowToString(encoding, start, end) {\n  var loweredCase = false; // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\n  if (start === undefined || start < 0) {\n    start = 0;\n  } // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n\n\n  if (start > this.length) {\n    return '';\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n\n  if (end <= 0) {\n    return '';\n  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\n\n  end >>>= 0;\n  start >>>= 0;\n\n  if (end <= start) {\n    return '';\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end);\n\n      case 'ascii':\n        return asciiSlice(this, start, end);\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end);\n\n      case 'base64':\n        return base64Slice(this, start, end);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\n\n\nBuffer.prototype._isBuffer = true;\n\nfunction swap(b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\n\nBuffer.prototype.swap16 = function swap16() {\n  var len = this.length;\n\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits');\n  }\n\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n\n  return this;\n};\n\nBuffer.prototype.swap32 = function swap32() {\n  var len = this.length;\n\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits');\n  }\n\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n\n  return this;\n};\n\nBuffer.prototype.swap64 = function swap64() {\n  var len = this.length;\n\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits');\n  }\n\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n\n  return this;\n};\n\nBuffer.prototype.toString = function toString() {\n  var length = this.length | 0;\n  if (length === 0) return '';\n  if (arguments.length === 0) return utf8Slice(this, 0, length);\n  return slowToString.apply(this, arguments);\n};\n\nBuffer.prototype.equals = function equals(b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n  if (this === b) return true;\n  return Buffer.compare(this, b) === 0;\n};\n\nBuffer.prototype.inspect = function inspect() {\n  var str = '';\n  var max = exports.INSPECT_MAX_BYTES;\n\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n    if (this.length > max) str += ' ... ';\n  }\n\n  return '<Buffer ' + str + '>';\n};\n\nBuffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer');\n  }\n\n  if (start === undefined) {\n    start = 0;\n  }\n\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index');\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0;\n  }\n\n  if (thisStart >= thisEnd) {\n    return -1;\n  }\n\n  if (start >= end) {\n    return 1;\n  }\n\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n  if (this === target) return 0;\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\n\n\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1; // Normalize byteOffset\n\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n\n  byteOffset = +byteOffset; // Coerce to Number.\n\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : buffer.length - 1;\n  } // Normalize byteOffset: negative offsets start from the end of the buffer\n\n\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1;else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;else return -1;\n  } // Normalize val\n\n\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  } // Finally, search either indexOf (if dir is true) or lastIndexOf\n\n\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1;\n    }\n\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n  } else if (typeof val === 'number') {\n    val = val & 0xFF; // Search for a byte value [0-255]\n\n    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n      }\n    }\n\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n  }\n\n  throw new TypeError('val must be string, number or Buffer');\n}\n\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n\n    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1;\n      }\n\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n\n  function read(buf, i) {\n    if (indexSize === 1) {\n      return buf[i];\n    } else {\n      return buf.readUInt16BE(i * indexSize);\n    }\n  }\n\n  var i;\n\n  if (dir) {\n    var foundIndex = -1;\n\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break;\n        }\n      }\n\n      if (found) return i;\n    }\n  }\n\n  return -1;\n}\n\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1;\n};\n\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n};\n\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n};\n\nfunction hexWrite(buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n\n    if (length > remaining) {\n      length = remaining;\n    }\n  } // must be an even number of digits\n\n\n  var strLen = string.length;\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');\n\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (isNaN(parsed)) return i;\n    buf[offset + i] = parsed;\n  }\n\n  return i;\n}\n\nfunction utf8Write(buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nfunction asciiWrite(buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length);\n}\n\nfunction latin1Write(buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length);\n}\n\nfunction base64Write(buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length);\n}\n\nfunction ucs2Write(buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0; // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0; // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0;\n\n    if (isFinite(length)) {\n      length = length | 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    } // legacy write(string, encoding, offset, length) - remove in v0.13\n\n  } else {\n    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n  }\n\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n\n  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds');\n  }\n\n  if (!encoding) encoding = 'utf8';\n  var loweredCase = false;\n\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length);\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length);\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length);\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\n\nBuffer.prototype.toJSON = function toJSON() {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  };\n};\n\nfunction base64Slice(buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf);\n  } else {\n    return base64.fromByteArray(buf.slice(start, end));\n  }\n}\n\nfunction utf8Slice(buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n  var i = start;\n\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n\n          break;\n\n        case 2:\n          secondByte = buf[i + 1];\n\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res);\n} // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\n\n\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\n\nfunction decodeCodePointsArray(codePoints) {\n  var len = codePoints.length;\n\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n  } // Decode in chunks to avoid \"call stack size exceeded\".\n\n\n  var res = '';\n  var i = 0;\n\n  while (i < len) {\n    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n  }\n\n  return res;\n}\n\nfunction asciiSlice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n\n  return ret;\n}\n\nfunction latin1Slice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n\n  return ret;\n}\n\nfunction hexSlice(buf, start, end) {\n  var len = buf.length;\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n  var out = '';\n\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i]);\n  }\n\n  return out;\n}\n\nfunction utf16leSlice(buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = '';\n\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n\n  return res;\n}\n\nBuffer.prototype.slice = function slice(start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n\n  if (end < start) end = start;\n  var newBuf;\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end);\n    newBuf.__proto__ = Buffer.prototype;\n  } else {\n    var sliceLen = end - start;\n    newBuf = new Buffer(sliceLen, undefined);\n\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start];\n    }\n  }\n\n  return newBuf;\n};\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\n\n\nfunction checkOffset(offset, ext, length) {\n  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n\n  var val = this[offset + --byteLength];\n  var mul = 1;\n\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset];\n};\n\nBuffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | this[offset + 1] << 8;\n};\n\nBuffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] << 8 | this[offset + 1];\n};\n\nBuffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n};\n\nBuffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n};\n\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\n\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\n\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return this[offset];\n  return (0xff - this[offset] + 1) * -1;\n};\n\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | this[offset + 1] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | this[offset] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n};\n\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n};\n\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, true, 23, 4);\n};\n\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, false, 23, 4);\n};\n\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, true, 52, 8);\n};\n\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, false, 52, 8);\n};\n\nfunction checkInt(buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nfunction objectWriteUInt16(buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1;\n\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n\n  return offset + 2;\n};\n\nfunction objectWriteUInt32(buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1;\n\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = value >>> 24;\n    this[offset + 2] = value >>> 16;\n    this[offset + 1] = value >>> 8;\n    this[offset] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    this[offset + 2] = value >>> 16;\n    this[offset + 3] = value >>> 24;\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n\n  return offset + 4;\n};\n\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n  if (offset < 0) throw new RangeError('Index out of range');\n}\n\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n  }\n\n  ieee754.write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4;\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert);\n};\n\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n  }\n\n  ieee754.write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8;\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert);\n}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\n\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done\n\n  if (end === start) return 0;\n  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions\n\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds');\n  }\n\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');\n  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?\n\n  if (end > this.length) end = this.length;\n\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n\n  var len = end - start;\n  var i;\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else {\n    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);\n  }\n\n  return len;\n}; // Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\n\n\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n\n      if (code < 256) {\n        val = code;\n      }\n    }\n\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string');\n    }\n\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding);\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  } // Invalid ranges are not set to a default, so can range check early.\n\n\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index');\n  }\n\n  if (end <= start) {\n    return this;\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n  if (!val) val = 0;\n  var i;\n\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());\n    var len = bytes.length;\n\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n\n  return this;\n}; // HELPER FUNCTIONS\n// ================\n\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\nfunction base64clean(str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''\n\n  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n\n  return str;\n}\n\nfunction stringtrim(str) {\n  if (str.trim) return str.trim();\n  return str.replace(/^\\s+|\\s+$/g, '');\n}\n\nfunction toHex(n) {\n  if (n < 16) return '0' + n.toString(16);\n  return n.toString(16);\n}\n\nfunction utf8ToBytes(string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i); // is surrogate component\n\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } // valid lead\n\n\n        leadSurrogate = codePoint;\n        continue;\n      } // 2 leads in a row\n\n\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue;\n      } // valid surrogate pair\n\n\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n\n    leadSurrogate = null; // encode utf8\n\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break;\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break;\n      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break;\n      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break;\n      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else {\n      throw new Error('Invalid code point');\n    }\n  }\n\n  return bytes;\n}\n\nfunction asciiToBytes(str) {\n  var byteArray = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n\n  return byteArray;\n}\n\nfunction utf16leToBytes(str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break;\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n\n  return byteArray;\n}\n\nfunction base64ToBytes(str) {\n  return base64.toByteArray(base64clean(str));\n}\n\nfunction blitBuffer(src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if (i + offset >= dst.length || i >= src.length) break;\n    dst[i + offset] = src[i];\n  }\n\n  return i;\n}\n\nfunction isnan(val) {\n  return val !== val; // eslint-disable-line no-self-compare\n}","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8ClampedArray(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n}, true);\n","// 19.1.2.15 Object.preventExtensions(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('preventExtensions', function ($preventExtensions) {\n  return function preventExtensions(it) {\n    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;\n  };\n});\n","import React from \"react\"\nimport { Link, StaticQuery, graphql } from \"gatsby\"\n\nimport * as $ from \"jquery\"\n\nimport { v4 as uuid } from \"uuid\"\n\nimport styled, { keyframes, css } from \"styled-components\"\nimport theme from \"styled-theming\"\nimport transition from \"styled-transition-group\"\n\nimport { LIGHT, DARK } from \"../theme/colors\"\nimport { rhythm, scale } from \"../utils/typography\"\n\nimport { withContext } from \"./ContextProvider\"\n\nimport Icon from \"./Icon\"\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  p {\n    margin: 2px 0;\n    font-style: italic;\n    font-size: ${rhythm(0.5)};\n\n    span {\n      font-style: italic !important;\n      margin: 0 3px;\n    }\n  }\n`\nconst random = (begin, end) => begin + Math.random() * (end - begin)\nconst animHover = keyframes`\n  ${Array.from({ length: 100 })\n    .map(\n      (_, i) => `\n      ${i}% {\n        transform: translate(${random(-3, 3)}px, ${random(\n        -3,\n        3\n      )}px) rotate(${random(-5, 5)}deg);\n      }\n  `\n    )\n    .join(\"\")}\n`\n\nconst Button = styled.button`\n  will-change: transform;\n  margin: ${rhythm(0.5)} 0;\n  font-size: ${rhythm(1)};\n  width: ${rhythm(6.6)};\n  padding: 6px 0px;\n  color: ${theme(\"mode\", {\n    light: LIGHT.REWARD.BUTTON.FG,\n    dark: DARK.REWARD.BUTTON.FG,\n  })};\n  background-color: ${theme(\"mode\", {\n    light: LIGHT.REWARD.BUTTON.BG,\n    dark: DARK.REWARD.BUTTON.BG,\n  })};\n  letter-spacing: ${props => (props.isHover ? \"2px\" : \"10px\")};\n  border: 1px solid #000;\n  border-radius: 5px;\n  box-shadow: inset 0px 4px 0px #fff6, inset 4px 0px 0px #fff6,\n    inset 0px -4px 0px #0006, inset -4px 0px 0px #0006, 3px 3px 0px 0px #000a;\n\n  &:active {\n    padding-top: 8px;\n    padding-bottom: 4px;\n    padding-left: 5px;\n\n    box-shadow: inset 4px 0px 0px #0006, inset 0px 4px 0px #0006,\n      inset 0px -4px 0px #fff6, inset -4px 0px 0px #fff6, 3px 3px 0px 0px #000a;\n  }\n  &:hover {\n    animation-name: ${animHover};\n    animation-duration: 3s;\n    animation-fill-mode: both;\n    animation-direction: alternate;\n    animation-iteration-count: infinite;\n    color: ${theme(\"mode\", {\n      light: LIGHT.REWARD.BUTTON.FG.brighten(0.5),\n      dark: DARK.REWARD.BUTTON.FG.brighten(0.5),\n    })};\n    background-color: ${theme(\"mode\", {\n      light: LIGHT.REWARD.BUTTON.BG.brighten(0.5),\n      dark: DARK.REWARD.BUTTON.BG.brighten(0.5),\n    })};\n  }\n  &:focus {\n    outline: none;\n  }\n`\n\nconst RewardWrapper = transition.div`\n  overflow: hidden;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  align-items: center;\n\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n\n  padding: 0 30vw;\n  background-color: #000C;\n  z-index: 999999999;\n\n  &:enter {\n    opacity: 0.01;\n  }\n  &:enter-active {\n    opacity: 1;\n    transition: 500ms ease-in;\n  }\n  &:exit {\n    opacity: 1;\n  }\n  &:exit-active {\n    opacity: 0.01;\n    transition: 500ms ease-out;\n  }\n\n  img {\n    width: 180px;\n    height: auto;\n    margin: 10px 120px;\n    filter: drop-shadow(2px 4px 6px black);\n  }\n\n  span {\n    font-size: 60px;\n  }\n`\n\nconst RewardWeixin = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nconst RewardAlipay = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nfunction randomItem(list) {\n  const len = list.length\n  return list[Math.floor(Math.random() * (len - 0.0001))]\n}\n\nclass FeedbackReward extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isHover: false,\n      isExpand: false,\n    }\n    this.qrCodeContainer = React.createRef()\n  }\n\n  onMouseEnter = e => {\n    e.preventDefault()\n    if (this.delaySet) {\n      clearTimeout(this.delaySet)\n    }\n    this.setState({\n      isHover: true,\n    })\n  }\n\n  onMouseOut = e => {\n    e.preventDefault()\n    this.delaySet = setTimeout(\n      () =>\n        this.setState({\n          isHover: false,\n        }),\n      500\n    )\n  }\n\n  onClick = e => {\n    e.preventDefault()\n    this.setState({\n      isExpand: !this.state.isExpand,\n    })\n  }\n\n  collapse = e => {\n    e.preventDefault()\n    this.setState({\n      isExpand: false,\n    })\n  }\n\n  render() {\n    const { isHover, isExpand } = this.state\n    const textList = [\n      <Icon type=\"s\" id=\"hammer\">\n        打我\n      </Icon>,\n      <Icon type=\"s\" id=\"bolt\">\n        用力\n      </Icon>,\n      <Icon type=\"s\" id=\"gifts\">\n        赏我\n      </Icon>,\n      <Icon type=\"s\" id=\"oil-can\">\n        加油\n      </Icon>,\n      <Icon type=\"s\" id=\"heart\">\n        爱我\n      </Icon>,\n      <Icon type=\"s\" id=\"kiss-wink-heart\">\n        爱我\n      </Icon>,\n      <Icon type=\"s\" id=\"grin-hearts\">\n        爱我\n      </Icon>,\n      <Icon type=\"s\" id=\"mars-double\">\n        鞭策我\n      </Icon>,\n      <Icon type=\"s\" id=\"gavel\">\n        蹂躏我\n      </Icon>,\n      <Icon type=\"s\" id=\"venus-double\">\n        别怜惜\n      </Icon>,\n      \"来把昆特牌?\",\n    ]\n    return (\n      <Container>\n        <p>如果我的文章帮助到了您</p>\n        <p>\n          请我喝杯\n          <Icon type=\"s\" id=\"mug-hot\" />\n          波波芋圆奶茶呗 ∠( ᐛ 」∠☼)＿\n        </p>\n        <p>您的鼓励和支持是我持续创造的最大支持 !!!</p>\n        <Button\n          onMouseEnter={this.onMouseEnter}\n          onMouseOut={this.onMouseOut}\n          onClick={this.onClick}\n          isHover={isHover}\n        >\n          {isHover ? (\n            randomItem(textList)\n          ) : (\n            <Icon type=\"s\" id=\"yen-sign\">\n              打赏\n            </Icon>\n          )}\n        </Button>\n\n        <StaticQuery\n          query={graphql`\n            query FeedbackReward {\n              site {\n                siteMetadata {\n                  qrcode {\n                    rewardAlipay\n                    rewardWeixin\n                  }\n                }\n              }\n            }\n          `}\n        >\n          {data => (\n            <RewardWrapper\n              onClick={this.collapse}\n              in={isExpand}\n              unmountOnExit\n              timeout={500}\n            >\n              <RewardWeixin>\n                <img\n                  src={data.site.siteMetadata.qrcode.rewardWeixin}\n                  alt=\"微信支付\"\n                />\n                <Icon type=\"b\" id=\"weixin\" />\n              </RewardWeixin>\n              <RewardAlipay>\n                <img\n                  src={data.site.siteMetadata.qrcode.rewardAlipay}\n                  alt=\"支付宝支付\"\n                />\n                <Icon type=\"b\" id=\"alipay\" />\n              </RewardAlipay>\n            </RewardWrapper>\n          )}\n        </StaticQuery>\n      </Container>\n    )\n  }\n}\n\nexport default FeedbackReward\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport styled from \"styled-components\"\nimport theme from \"styled-theming\"\n\nimport { LIGHT, DARK } from \"../theme/colors\"\nimport { rhythm, scale } from \"../utils/typography\"\n\nimport { withContext } from \"./ContextProvider\"\n\nimport Icon from \"./Icon\"\n\nconst Container = styled.div`\n  border-left: 3px solid\n    ${theme(\"mode\", {\n      light: LIGHT.LICENSE.BAR,\n      dark: DARK.LICENSE.BAR,\n    })};\n\n  background-color: ${theme(\"mode\", {\n    light: \"#0001\",\n    dark: \"#FFF1\",\n  })};\n  padding: 1px;\n  margin: 20px 0;\n  table {\n    margin: ${rhythm(0.5)};\n    white-space: nowrap;\n\n    @media screen and (max-width: 480px) {\n      margin: 0;\n    }\n    tr {\n      border: none;\n      @media screen and (max-width: 480px) {\n        vertical-align: top;\n      }\n    }\n    td {\n      border: none;\n      padding: ${rhythm(0.1)};\n      @media screen and (max-width: 480px) {\n        padding: ${rhythm(0.1)};\n      }\n\n      &:first-child {\n        @media screen and (max-width: 480px) {\n          padding-left: ${rhythm(0.25)};\n        }\n      }\n\n      &:last-child {\n        overflow-wrap: anywhere;\n        white-space: pre-wrap;\n\n        @media screen and (max-width: 480px) {\n          padding-right: ${rhythm(0.2)};\n        }\n      }\n    }\n  }\n`\n\nconst License = ({ context }) => {\n  const { site, location } = context\n  return (\n    <Container>\n      <table>\n        <tbody>\n          <tr>\n            <td align=\"right\">本文作者：</td>\n            <td>{site.siteMetadata.author.name}</td>\n          </tr>\n          <tr>\n            <td align=\"right\">本文链接：</td>\n            <td>\n              <a href={location.href}>{location.href}</a>\n            </td>\n          </tr>\n          <tr>\n            <td align=\"right\">版权声明：</td>\n            <td>\n              本博客所有文章除特别声明外，均采用\n              <a href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">\n                <Icon type=\"b\" id=\"creative-commons\" />\n                BY-NC-SA\n              </a>\n              许可协议。转载请注明出处！\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </Container>\n  )\n}\n\nexport default withContext(License)\n","import chroma from \"chroma-js\"\n\nfunction hex(v) {\n  if (v === undefined) return \"00\"\n  if (v < 16) return \"0\" + parseInt(\"\" + v).toString(16)\n  return parseInt(\"\" + v).toString(16)\n}\n\nfunction toColor(...args) {\n  let ret = \"\"\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i]\n    ret += hex(arg)\n  }\n  return \"#\" + ret\n}\n\nfunction calcAngleDegrees(x, y) {\n  return (Math.atan2(y, x) * 180) / Math.PI\n}\n\nclass Cell {\n  constructor({ ctx, cx, cy, width, height, color }) {\n    this.ctx = ctx\n    this.cx = cx\n    this.cy = cy\n    this.width = width\n    this.height = height\n    this.color = color\n    this.scale = 1.0\n    this.rx = 0.0\n    this.ry = 0.0\n    this.handleColor = c => c\n  }\n\n  draw() {\n    this.ctx.fillStyle = this.handleColor(this.color)\n    this.ctx.fillRect(\n      this.cx - this.width * this.scale * 0.5 + this.rx,\n      this.cy - this.height * this.scale * 0.5 + this.ry,\n      this.width * this.scale,\n      this.height * this.scale\n    )\n  }\n\n  reset() {\n    this.scale = 1.0\n    this.rx = 0.0\n    this.ry = 0.0\n  }\n\n  animate({ time, width, height, progress }) {\n    const delta =\n      Math.sqrt(\n        Math.pow(this.cx - width * 0.5, 2) + Math.pow(this.cy - height * 0.5, 2)\n      ) * 0.01\n    let degrees = calcAngleDegrees(\n      this.cx - width * 0.5,\n      this.cy - height * 0.5\n    )\n    degrees = (-degrees - 180) % 360\n    this.handleColor = c => {\n      const c1 = chroma(c)\n      if (degrees > (-progress / 98) * 360) {\n        return c1.hex()\n      } else {\n        return c1.desaturate(3).hex()\n      }\n    }\n    this.scale =\n      1.0 +\n      Math.pow(Math.E, -Math.pow(1.5 * Math.sin(-time * 3 + delta) - 2, 2))\n  }\n}\n\nclass Viewer {\n  constructor({\n    canvas,\n    width,\n    height,\n    tinyImg,\n    smallImg,\n    changeBlur,\n  }) {\n    this.canvas = canvas\n    this.width = width\n    this.height = height\n    this.tinyImg = tinyImg\n    this.smallImg = smallImg\n    this.changeBlur = changeBlur\n    this.ctx = canvas.getContext(\"2d\")\n    this.progress = 0.0\n    this.animated = true\n    this.image = null\n    this.startLoop()\n    this.tinyImgToCells()\n  }\n\n  startLoop() {\n    try {\n      // ssr 兼容\n      window.requestAnimationFrame(this.loop)\n    } catch {}\n  }\n\n  loop = () => {\n    if (this.animated) {\n      this.draw()\n      window.requestAnimationFrame(this.loop)\n    }\n  }\n\n  setProgress(progress) {\n    this.progress = progress\n    // if (this.progress > 50 && this.progress < 100) {\n    //   this.smallImgToCells()\n    // }\n    // console.log(\"progress\", progress)\n  }\n\n  setPhotoImage(image) {\n    this.image = image\n    this.progress = 100\n    this.changeBlur(0)\n    // console.log(\"image\", image)\n    this.cells = null\n  }\n\n  get time() {\n    try {\n      const t = window.performance.now()\n      if (!this.beginTime) {\n        this.beginTime = t\n      }\n      return (t - this.beginTime) / 1000.0\n    } catch {\n      return 0.0\n    }\n  }\n\n  draw() {\n    this.ctx.fillStyle = `rgba(0,0,0,0)`\n    this.ctx.fillRect(0, 0, this.width, this.height)\n\n    if (!this.image) {\n      this.drawCells()\n    } else {\n      this.drawPhoto()\n    }\n  }\n\n  drawCells() {\n    if (!this.cells) return\n    const t = this.time\n    const sorted = this.cells //.sort((a, b) => a.scale - b.scale)\n    for (let i = 0; i < sorted.length; i++) {\n      sorted[i].animate({\n        time: t,\n        width: this.width,\n        height: this.height,\n        progress: this.progress,\n      })\n      sorted[i].draw()\n    }\n  }\n\n  resetCells() {\n    if (!this.cells) return\n    for (let i = 0; i < this.cells.length; i++) {\n      this.cells[i].reset()\n    }\n  }\n\n  rawBufferToCells({ raw, width, height, channels }) {\n    this.cells = []\n    const rw = this.width / width\n    const rh = this.height / height\n    this.changeBlur(parseInt(\"\" + Math.max(rw, rh)))\n    const pixels = Uint8Array.from(new Buffer(raw, \"base64\"))\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        let color\n        if (channels === 1) {\n          color = toColor(pixels[y * width * channels + x * channels])\n        } else if (channels === 3) {\n          const r = pixels[y * width * channels + x * channels]\n          const g = pixels[y * width * channels + x * channels + 1]\n          const b = pixels[y * width * channels + x * channels + 2]\n          color = toColor(r, g, b)\n        } else if (channels === 4) {\n          const r = pixels[y * width * channels + x * channels]\n          const g = pixels[y * width * channels + x * channels + 1]\n          const b = pixels[y * width * channels + x * channels + 2]\n          const a = pixels[y * width * channels + x * channels + 3]\n          color = toColor(r, g, b, a)\n        }\n        this.cells.push(\n          new Cell({\n            ctx: this.ctx,\n            cx: (x - 0.5) * rw,\n            cy: (y - 0.5) * rh,\n            width: rw,\n            height: rh,\n            color,\n          })\n        )\n      }\n    }\n  }\n\n  tinyImgToCells() {\n    if (this.type === \"tiny\") return\n    this.type = \"tiny\"\n    const { raw, width, height, channels } = this.tinyImg\n    this.rawBufferToCells({ raw, width, height, channels })\n  }\n\n  smallImgToCells() {\n    if (this.type === \"small\") return\n    this.type = \"small\"\n    const { raw, width, height, channels } = this.smallImg\n    this.rawBufferToCells({ raw, width, height, channels })\n  }\n\n  drawPhoto() {\n    if (!this.image) return\n    this.ctx.drawImage(this.image, 0, 0, this.width, this.height)\n    this.animated = false\n  }\n}\n\nexport default Viewer\n","require(\"core-js/modules/es6.regexp.split\");\n\n//! moment.js locale configuration\n//! locale : Chinese (China) [zh-cn]\n//! author : suupic : https://github.com/suupic\n//! author : Zeno Zeng : https://github.com/zenozeng\n;\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' && typeof require === 'function' ? factory(require('../moment')) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n})(this, function (moment) {\n  'use strict'; //! moment.js locale configuration\n\n  var zhCn = moment.defineLocale('zh-cn', {\n    months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),\n    monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n    weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),\n    weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),\n    weekdaysMin: '日_一_二_三_四_五_六'.split('_'),\n    longDateFormat: {\n      LT: 'HH:mm',\n      LTS: 'HH:mm:ss',\n      L: 'YYYY/MM/DD',\n      LL: 'YYYY年M月D日',\n      LLL: 'YYYY年M月D日Ah点mm分',\n      LLLL: 'YYYY年M月D日ddddAh点mm分',\n      l: 'YYYY/M/D',\n      ll: 'YYYY年M月D日',\n      lll: 'YYYY年M月D日 HH:mm',\n      llll: 'YYYY年M月D日dddd HH:mm'\n    },\n    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,\n    meridiemHour: function meridiemHour(hour, meridiem) {\n      if (hour === 12) {\n        hour = 0;\n      }\n\n      if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {\n        return hour;\n      } else if (meridiem === '下午' || meridiem === '晚上') {\n        return hour + 12;\n      } else {\n        // '中午'\n        return hour >= 11 ? hour : hour + 12;\n      }\n    },\n    meridiem: function meridiem(hour, minute, isLower) {\n      var hm = hour * 100 + minute;\n\n      if (hm < 600) {\n        return '凌晨';\n      } else if (hm < 900) {\n        return '早上';\n      } else if (hm < 1130) {\n        return '上午';\n      } else if (hm < 1230) {\n        return '中午';\n      } else if (hm < 1800) {\n        return '下午';\n      } else {\n        return '晚上';\n      }\n    },\n    calendar: {\n      sameDay: '[今天]LT',\n      nextDay: '[明天]LT',\n      nextWeek: '[下]ddddLT',\n      lastDay: '[昨天]LT',\n      lastWeek: '[上]ddddLT',\n      sameElse: 'L'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}(日|月|周)/,\n    ordinal: function ordinal(number, period) {\n      switch (period) {\n        case 'd':\n        case 'D':\n        case 'DDD':\n          return number + '日';\n\n        case 'M':\n          return number + '月';\n\n        case 'w':\n        case 'W':\n          return number + '周';\n\n        default:\n          return number;\n      }\n    },\n    relativeTime: {\n      future: '%s后',\n      past: '%s前',\n      s: '几秒',\n      ss: '%d 秒',\n      m: '1 分钟',\n      mm: '%d 分钟',\n      h: '1 小时',\n      hh: '%d 小时',\n      d: '1 天',\n      dd: '%d 天',\n      M: '1 个月',\n      MM: '%d 个月',\n      y: '1 年',\n      yy: '%d 年'\n    },\n    week: {\n      // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效\n      dow: 1,\n      // Monday is the first day of the week.\n      doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n    }\n  });\n  return zhCn;\n});","// 19.1.2.11 Object.isExtensible(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isExtensible', function ($isExtensible) {\n  return function isExtensible(it) {\n    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;\n  };\n});\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? nBytes - 1 : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n  i += d;\n  e = s & (1 << -nBits) - 1;\n  s >>= -nBits;\n  nBits += eLen;\n\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n  var i = isLE ? 0 : nBytes - 1;\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = e << mLen | m;\n  eLen += mLen;\n\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n};","import React from \"react\"\n\nconst GoogleMapIcon = () => {\n  return (\n    <svg\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      x=\"0px\"\n      y=\"0px\"\n      viewBox=\"0 0 512 512\"\n      style={{\n        width: \"2rem\",\n        height: \"2rem\",\n        enableBackground: \"new 0 0 512 512\",\n      }}\n    >\n      <circle style={{ fill: \"#40A459\" }} cx=\"255.722\" cy=\"256\" r=\"255.445\" />\n      <path\n        style={{ fill: \"#378B4E\" }}\n        d=\"M255.722,0.555c-1.944,0-3.878,0.03-5.812,0.073c-0.492,0.011-0.983,0.022-1.474,0.037\n\tc-1.843,0.051-3.682,0.119-5.514,0.209c-0.474,0.023-0.945,0.056-1.418,0.081c-1.394,0.077-2.785,0.165-4.174,0.264\n\tc-0.699,0.05-1.397,0.098-2.094,0.153c-1.61,0.128-3.217,0.27-4.82,0.428c-0.829,0.082-1.654,0.173-2.479,0.262\n\tc-0.991,0.108-1.98,0.221-2.968,0.34c-0.856,0.103-1.714,0.202-2.567,0.313c125.334,16.327,222.126,123.498,222.126,253.282\n\tS347.737,492.953,222.403,509.28c0.854,0.111,1.71,0.211,2.567,0.313c0.987,0.119,1.977,0.232,2.968,0.34\n\tc0.826,0.09,1.652,0.181,2.479,0.262c1.603,0.158,3.209,0.3,4.82,0.428c0.696,0.056,1.395,0.104,2.094,0.153\n\tc1.388,0.099,2.779,0.188,4.174,0.264c0.473,0.027,0.945,0.058,1.418,0.081c1.833,0.09,3.672,0.158,5.514,0.209\n\tc0.491,0.014,0.982,0.026,1.474,0.037c1.932,0.043,3.868,0.073,5.812,0.073c141.079,0,255.445-114.367,255.445-255.445\n\tS396.801,0.555,255.722,0.555z\"\n      />\n      <path\n        style={{ fill: \"#898790\" }}\n        d=\"M222.403,233.787l106.563-61.152c0,0,116.569,24.829,143.473-24.263l8.485-15.483l7.379,16.04\n\tc15.321,33.304,23.42,70.329,23.42,107.071c0,84.691-41.95,163.833-112.217,211.703l-7.25,4.94L222.403,233.787z\"\n      />\n      <path\n        style={{ fill: \"#7A797F\" }}\n        d=\"M511.166,256c0-44.143-11.198-85.671-30.908-121.898l-7.82,14.269\n\tc-9.45,17.245-21.888,34.878-34.284,50.741c4.162,18.295,6.374,37.333,6.374,56.888c0,71.337-29.248,135.834-76.4,182.176\n\tl23.852,34.666C463.639,427.598,511.166,347.012,511.166,256z\"\n      />\n      <path\n        style={{ fill: \"#3D9AE3\" }}\n        d=\"M255.722,512c-87.455,0-168.01-44.081-215.484-117.917l-4.527-7.04l142.267-119.937l163.74,230.122\n\tl-10.434,3.385C306.874,508.169,281.452,512,255.722,512z\"\n      />\n      <path\n        style={{ fill: \"#1D81CE\" }}\n        d=\"M342.752,496.827l-17.317-24.795c-30.569,19.333-65.625,32.915-103.137,37.801\n\tc10.906,1.42,22.13,1.612,33.424,1.612C286.17,511.445,315.674,506.6,342.752,496.827z\"\n      />\n      <path\n        style={{ fill: \"#FFFFFF\" }}\n        d=\"M177.978,267.106l44.425-33.319l170.805,238.278l-8.302,4.872\n\tc-11.729,6.884-24.073,12.861-36.69,17.766l-6.499,2.527L177.978,267.106z\"\n      />\n      <path\n        style={{ fill: \"#E0E0E3\" }}\n        d=\"M341.718,497.229c18.2-6.475,35.457-14.944,51.49-25.164l-24.615-34.338\n\tc-13.395,13.232-28.248,24.992-44.293,35.023L341.718,497.229z\"\n      />\n      <path\n        style={{ fill: \"#FFCE00\" }}\n        d=\"M31.37,379.188c-7.01-12.718-12.964-26.113-17.696-39.813l-2.112-8.059l299.691-208.592\n\tl44.425,33.319L35.712,387.042L31.37,379.188z\"\n      />\n      <path\n        style={{ fill: \"#CD2900\" }}\n        d=\"M382.579,250.216c-15.713-16.41-94.094-100.753-94.094-149.704C288.485,45.089,333.575,0,388.997,0\n\ts100.512,45.089,100.512,100.512c0,48.918-78.382,133.287-94.095,149.704l0,0C391.917,253.87,386.077,253.871,382.579,250.216\n\tL382.579,250.216z\"\n      />\n      <path\n        style={{ fill: \"#891D00\" }}\n        d=\"M388.997,134.386c-24.803,0-44.98-20.178-44.98-44.98s20.178-44.98,44.98-44.98\n\tc24.803,0,44.98,20.178,44.98,44.98S413.8,134.386,388.997,134.386z\"\n      />\n      <path\n        style={{ fill: \"#FFFFFF\" }}\n        d=\"M144.659,186.586c29.088,0,52.755-23.666,52.755-52.755c0-4.6-3.729-8.33-8.33-8.33h-33.319\n\tc-4.6,0-8.33,3.729-8.33,8.33c0,4.6,3.729,8.33,8.33,8.33h24.018c-3.769,15.901-18.088,27.766-35.125,27.766\n\tc-19.902,0-36.095-16.193-36.095-36.095s16.193-36.095,36.095-36.095c8.8,0,17.275,3.202,23.865,9.015\n\tc3.452,3.044,8.715,2.713,11.757-0.736c3.043-3.45,2.713-8.714-0.736-11.757c-9.636-8.5-22.025-13.181-34.886-13.181\n\tc-29.088,0-52.755,23.666-52.755,52.755S115.57,186.586,144.659,186.586z\"\n      />\n    </svg>\n  )\n}\n\nexport default GoogleMapIcon\n","import React from \"react\"\n\nconst BaiduMapIcon = () => {\n  return (\n    <svg\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      x=\"0px\"\n      y=\"0px\"\n      viewBox=\"0 0 400 400\"\n      style={{\n        width: \"2rem\",\n        height: \"2rem\",\n        enableBackground: \"new 0 0 400 400\",\n      }}\n    >\n      <g>\n        <path\n          d=\"M187.600 43.600 C 187.600 43.825,186.475 44.000,185.024 44.000 C 183.607 44.000,182.336 44.180,182.200 44.400 C 182.064 44.620,181.074 44.800,180.000 44.800 C 178.926 44.800,177.936 44.980,177.800 45.200 C 177.664 45.420,176.944 45.600,176.200 45.600 C 175.456 45.600,174.736 45.780,174.600 46.000 C 174.464 46.220,173.744 46.400,173.000 46.400 C 172.256 46.400,171.536 46.580,171.400 46.800 C 171.264 47.020,170.623 47.200,169.976 47.200 C 169.329 47.200,168.800 47.380,168.800 47.600 C 168.800 47.820,168.361 48.000,167.824 48.000 C 167.287 48.000,166.736 48.180,166.600 48.400 C 166.464 48.620,165.924 48.800,165.400 48.800 C 164.876 48.800,164.336 48.980,164.200 49.200 C 164.064 49.420,163.631 49.600,163.238 49.600 C 162.845 49.600,162.000 49.850,161.361 50.156 C 160.723 50.462,159.480 51.024,158.600 51.405 C 153.525 53.602,145.111 57.948,144.867 58.499 C 144.793 58.665,144.512 58.800,144.242 58.800 C 143.972 58.800,143.402 59.115,142.975 59.500 C 142.549 59.885,141.705 60.455,141.100 60.768 C 140.495 61.080,140.000 61.485,140.000 61.668 C 140.000 61.850,139.730 62.000,139.400 62.000 C 139.070 62.000,138.800 62.180,138.800 62.400 C 138.800 62.620,138.622 62.800,138.405 62.800 C 138.051 62.800,137.187 63.413,135.855 64.609 C 135.605 64.834,134.034 66.127,132.364 67.483 C 130.694 68.838,127.454 71.816,125.164 74.101 C 120.909 78.345,120.432 78.872,118.006 82.001 C 117.239 82.991,116.390 84.032,116.120 84.315 C 115.849 84.598,115.313 85.363,114.928 86.015 C 114.543 86.667,114.086 87.200,113.914 87.200 C 113.741 87.200,113.600 87.470,113.600 87.800 C 113.600 88.130,113.450 88.400,113.268 88.400 C 113.085 88.400,112.680 88.895,112.368 89.500 C 112.055 90.105,111.485 90.949,111.100 91.375 C 110.715 91.802,110.400 92.387,110.400 92.675 C 110.400 92.964,110.220 93.200,110.000 93.200 C 109.780 93.200,109.600 93.372,109.600 93.582 C 109.600 93.793,109.031 94.918,108.336 96.082 C 106.518 99.127,104.361 103.626,102.621 108.000 C 101.790 110.090,100.962 112.160,100.782 112.600 C 100.601 113.040,100.236 114.120,99.971 115.000 C 99.706 115.880,99.349 116.960,99.178 117.400 C 99.007 117.840,98.750 118.650,98.606 119.200 C 98.463 119.750,98.165 120.830,97.943 121.600 C 97.222 124.102,96.250 128.914,95.559 133.400 C 94.898 137.686,94.642 155.986,95.187 160.000 C 96.243 167.792,96.976 171.292,99.034 178.380 C 102.556 190.509,109.403 203.609,117.252 213.235 C 126.769 224.908,134.509 234.667,138.954 240.600 C 139.778 241.700,140.673 242.873,140.942 243.206 C 143.815 246.763,152.304 258.456,156.473 264.600 C 158.265 267.240,159.881 269.460,160.065 269.533 C 160.249 269.607,160.400 269.842,160.400 270.055 C 160.400 270.269,161.095 271.469,161.945 272.722 C 167.182 280.444,176.022 297.021,181.612 309.600 C 182.541 311.690,183.728 314.350,184.250 315.512 C 184.773 316.673,185.200 317.710,185.200 317.816 C 185.200 317.922,185.578 318.862,186.040 319.904 C 186.502 320.947,187.018 322.160,187.186 322.600 C 187.355 323.040,187.697 323.895,187.946 324.500 C 188.819 326.615,189.128 327.418,189.993 329.800 C 190.472 331.120,191.030 332.513,191.232 332.895 C 191.434 333.277,191.600 333.916,191.600 334.315 C 191.600 334.714,191.759 335.211,191.953 335.420 C 192.147 335.629,192.596 336.970,192.951 338.400 C 194.957 346.491,204.674 346.717,206.378 338.712 C 206.769 336.876,208.581 331.398,209.590 329.000 C 209.776 328.560,210.589 326.490,211.397 324.400 C 212.206 322.310,213.123 320.015,213.434 319.300 C 213.745 318.585,214.291 317.325,214.647 316.500 C 215.004 315.675,215.529 314.460,215.815 313.800 C 220.315 303.417,229.186 285.898,233.600 278.679 C 235.851 274.996,244.480 261.819,244.783 261.600 C 244.935 261.490,245.804 260.320,246.713 259.000 C 250.328 253.751,255.996 246.168,265.600 233.731 C 271.831 225.660,279.904 215.620,280.822 214.800 C 282.703 213.118,290.572 201.257,292.299 197.500 C 292.678 196.675,293.126 196.000,293.294 196.000 C 293.462 196.000,293.600 195.755,293.600 195.456 C 293.600 195.157,294.122 193.852,294.760 192.556 C 298.660 184.636,301.767 174.730,303.153 165.800 C 303.392 164.260,303.770 161.815,303.994 160.367 C 304.532 156.878,304.515 139.192,303.970 135.507 C 302.480 125.439,299.697 114.501,297.201 108.900 C 296.980 108.405,296.644 107.595,296.453 107.100 C 296.262 106.605,295.542 105.050,294.853 103.644 C 294.164 102.238,293.600 100.843,293.600 100.544 C 293.600 100.245,293.464 100.000,293.298 100.000 C 293.131 100.000,292.742 99.415,292.432 98.700 C 292.123 97.985,291.359 96.648,290.735 95.728 C 290.111 94.808,289.600 93.946,289.600 93.813 C 289.600 91.385,274.756 73.892,268.024 68.387 C 267.091 67.624,265.939 66.665,265.464 66.255 C 264.989 65.845,263.970 65.035,263.200 64.455 C 262.431 63.875,261.452 63.085,261.025 62.700 C 260.598 62.315,260.053 62.000,259.813 62.000 C 259.573 62.000,259.117 61.640,258.800 61.200 C 258.483 60.760,257.903 60.400,257.512 60.400 C 257.120 60.400,256.800 60.250,256.800 60.068 C 256.800 59.885,256.305 59.480,255.700 59.168 C 255.095 58.856,254.510 58.511,254.400 58.401 C 253.647 57.645,242.496 52.000,241.757 52.000 C 241.451 52.000,241.200 51.820,241.200 51.600 C 241.200 51.380,240.928 51.200,240.595 51.200 C 240.262 51.200,239.587 50.992,239.095 50.738 C 237.169 49.742,236.783 49.600,236.005 49.600 C 235.562 49.600,235.200 49.420,235.200 49.200 C 235.200 48.980,234.761 48.800,234.224 48.800 C 233.687 48.800,233.136 48.620,233.000 48.400 C 232.864 48.180,232.324 48.000,231.800 48.000 C 231.276 48.000,230.736 47.820,230.600 47.600 C 230.464 47.380,229.834 47.200,229.200 47.200 C 228.566 47.200,227.936 47.020,227.800 46.800 C 227.664 46.580,226.933 46.400,226.176 46.400 C 225.419 46.400,224.800 46.220,224.800 46.000 C 224.800 45.780,224.091 45.600,223.224 45.600 C 222.357 45.600,221.536 45.420,221.400 45.200 C 221.264 44.980,220.274 44.800,219.200 44.800 C 218.126 44.800,217.136 44.620,217.000 44.400 C 216.864 44.180,215.694 44.000,214.400 44.000 C 213.106 44.000,211.936 43.820,211.800 43.600 C 211.644 43.348,207.129 43.200,199.576 43.200 C 191.859 43.200,187.600 43.342,187.600 43.600 M189.385 102.500 C 189.495 102.995,189.454 122.930,189.293 146.800 L 189.000 190.200 172.200 190.200 C 159.048 190.200,155.096 190.083,154.000 189.660 C 153.230 189.362,152.240 188.984,151.800 188.818 C 138.357 183.757,131.792 173.349,131.854 157.200 L 131.881 150.200 133.289 146.734 C 134.063 144.828,135.080 142.730,135.548 142.072 C 136.017 141.415,136.400 140.749,136.400 140.594 C 136.400 140.218,139.428 136.521,141.013 134.961 C 143.622 132.394,147.457 129.869,150.900 128.453 C 151.505 128.204,152.405 127.834,152.900 127.630 C 154.909 126.804,156.594 126.656,165.500 126.517 L 174.800 126.372 174.800 113.986 L 174.800 101.600 181.992 101.600 C 189.125 101.600,189.186 101.607,189.385 102.500 M217.600 148.231 L 217.800 169.863 218.939 171.356 C 219.565 172.177,220.915 173.463,221.939 174.214 L 223.800 175.580 234.500 175.590 L 245.200 175.600 245.200 151.000 L 245.200 126.400 252.402 126.400 L 259.605 126.400 259.502 158.300 L 259.400 190.200 239.400 190.200 C 218.026 190.200,219.138 190.293,214.478 188.113 C 209.650 185.853,205.636 181.750,203.594 176.986 C 202.785 175.099,202.294 127.439,203.076 126.658 C 203.227 126.506,206.512 126.431,210.376 126.491 L 217.400 126.600 217.600 148.231 M158.000 142.464 C 148.255 148.085,146.428 164.343,154.680 172.014 C 158.317 175.396,159.041 175.600,167.438 175.600 L 174.800 175.600 174.800 158.600 L 174.800 141.600 167.100 141.628 C 160.135 141.654,159.266 141.734,158.000 142.464 \"\n          stroke=\"none\"\n          fill=\"#ed2626\"\n          fill-rule=\"evenodd\"\n        ></path>\n        <path\n          d=\"M57.300 0.292 C 56.145 0.374,55.200 0.612,55.200 0.821 C 55.200 1.029,54.480 1.200,53.600 1.200 C 52.720 1.200,52.000 1.380,52.000 1.600 C 52.000 1.820,51.280 2.000,50.400 2.000 C 49.520 2.000,48.800 2.180,48.800 2.400 C 48.800 2.620,48.260 2.800,47.600 2.800 C 46.940 2.800,46.400 2.980,46.400 3.200 C 46.400 3.420,45.950 3.600,45.400 3.600 C 44.850 3.600,44.400 3.780,44.400 4.000 C 44.400 4.220,44.166 4.400,43.880 4.400 C 43.144 4.400,41.207 5.341,41.203 5.700 C 41.201 5.865,40.660 6.000,40.000 6.000 C 39.340 6.000,38.799 6.135,38.797 6.300 C 38.795 6.465,38.390 6.798,37.897 7.040 C 34.348 8.781,30.918 10.645,30.485 11.068 C 30.202 11.345,29.437 11.887,28.785 12.272 C 28.133 12.657,27.600 13.114,27.600 13.286 C 27.600 13.459,27.406 13.600,27.169 13.600 C 26.931 13.600,26.076 14.281,25.269 15.113 C 24.461 15.945,23.170 17.067,22.400 17.606 C 20.617 18.855,18.855 20.617,17.606 22.400 C 17.067 23.170,15.945 24.461,15.113 25.269 C 14.281 26.076,13.600 26.931,13.600 27.169 C 13.600 27.406,13.459 27.600,13.286 27.600 C 13.114 27.600,12.657 28.133,12.272 28.785 C 11.887 29.437,11.353 30.209,11.086 30.501 C 10.156 31.516,9.558 32.790,10.106 32.591 C 10.378 32.493,30.119 51.942,53.976 75.811 C 77.832 99.679,97.469 119.072,97.612 118.904 C 97.756 118.737,98.281 117.340,98.779 115.800 C 100.511 110.450,102.941 104.574,105.312 100.000 C 106.624 97.470,107.900 94.996,108.149 94.503 C 108.397 94.010,108.735 93.605,108.900 93.603 C 109.065 93.601,109.200 93.413,109.200 93.185 C 109.200 92.543,113.815 85.809,117.002 81.800 C 122.025 75.483,127.431 70.150,135.186 63.863 C 136.907 62.468,145.405 56.929,148.000 55.511 C 149.430 54.730,151.410 53.650,152.400 53.111 C 154.918 51.741,165.163 47.600,166.034 47.600 C 166.429 47.600,166.851 47.441,166.971 47.246 C 167.092 47.051,167.687 46.796,168.295 46.679 C 168.903 46.562,170.120 46.259,171.000 46.006 C 188.985 40.841,210.215 40.841,228.200 46.006 C 229.080 46.259,230.297 46.562,230.905 46.679 C 231.513 46.796,232.108 47.051,232.229 47.246 C 232.349 47.441,232.752 47.600,233.124 47.601 C 235.567 47.604,250.299 54.491,255.472 58.050 C 256.392 58.682,257.337 59.200,257.572 59.200 C 257.807 59.200,258.000 59.368,258.000 59.573 C 258.000 59.778,258.359 60.060,258.798 60.199 C 259.236 60.338,259.821 60.672,260.098 60.939 C 260.374 61.207,261.230 61.868,262.000 62.407 C 267.710 66.409,276.438 74.576,281.208 80.380 C 282.194 81.579,283.720 83.394,284.600 84.414 C 287.482 87.753,287.929 88.320,288.428 89.266 C 288.698 89.780,289.036 90.290,289.179 90.400 C 289.718 90.816,291.600 94.369,291.600 94.971 C 291.600 95.317,291.780 95.600,292.000 95.600 C 292.220 95.600,292.400 95.870,292.400 96.200 C 292.400 96.530,292.535 96.801,292.700 96.801 C 292.865 96.802,293.450 97.792,294.000 99.000 C 294.550 100.208,295.135 101.198,295.300 101.199 C 295.465 101.199,295.600 101.472,295.600 101.805 C 295.600 102.138,295.780 102.768,296.000 103.205 C 296.220 103.642,296.580 104.358,296.800 104.795 C 297.020 105.232,297.200 105.862,297.200 106.195 C 297.200 106.528,297.380 106.800,297.600 106.800 C 297.820 106.800,298.000 107.149,298.000 107.576 C 298.000 108.003,298.180 108.464,298.400 108.600 C 298.620 108.736,298.800 109.287,298.800 109.824 C 298.800 110.361,298.980 110.800,299.200 110.800 C 299.420 110.800,299.600 111.239,299.600 111.776 C 299.600 112.313,299.780 112.864,300.000 113.000 C 300.220 113.136,300.400 113.676,300.400 114.200 C 300.400 114.724,300.580 115.264,300.800 115.400 C 301.020 115.536,301.200 116.076,301.200 116.600 C 301.200 117.124,301.380 117.664,301.600 117.800 C 301.820 117.936,302.000 118.667,302.000 119.424 C 302.000 120.181,302.180 120.800,302.400 120.800 C 302.620 120.800,302.800 121.520,302.800 122.400 C 302.800 123.280,302.963 124.000,303.161 124.000 C 303.360 124.000,303.620 124.855,303.740 125.900 C 303.859 126.945,304.143 128.880,304.372 130.200 C 306.214 140.858,306.221 154.063,304.389 165.600 C 304.162 167.030,303.874 168.920,303.747 169.800 C 303.621 170.680,303.356 171.571,303.159 171.780 C 302.962 171.989,302.800 172.743,302.800 173.456 C 302.800 174.169,302.620 174.864,302.400 175.000 C 302.180 175.136,302.000 175.777,302.000 176.424 C 302.000 177.071,301.820 177.600,301.600 177.600 C 301.380 177.600,301.200 178.219,301.200 178.976 C 301.200 179.733,301.020 180.464,300.800 180.600 C 300.580 180.736,300.400 181.199,300.400 181.629 C 300.400 182.059,300.220 182.768,300.000 183.205 C 299.780 183.642,299.420 184.358,299.200 184.795 C 298.980 185.232,298.800 185.952,298.800 186.395 C 298.800 186.838,298.620 187.200,298.400 187.200 C 298.180 187.200,298.000 187.650,298.000 188.200 C 298.000 188.750,297.820 189.200,297.600 189.200 C 297.380 189.200,297.200 189.560,297.200 190.000 C 297.200 190.440,297.020 190.800,296.800 190.800 C 296.580 190.800,296.400 191.160,296.400 191.600 C 296.400 192.040,296.220 192.400,296.000 192.400 C 295.780 192.400,295.600 192.760,295.600 193.200 C 295.600 193.640,295.420 194.000,295.200 194.000 C 294.980 194.000,294.800 194.360,294.800 194.800 C 294.800 195.240,294.620 195.600,294.400 195.600 C 294.180 195.600,294.000 195.960,294.000 196.400 C 294.000 196.840,293.820 197.200,293.600 197.200 C 293.380 197.200,293.200 197.560,293.200 198.000 C 293.200 198.440,293.020 198.800,292.800 198.800 C 292.580 198.800,292.400 199.160,292.400 199.600 C 292.400 200.040,292.220 200.400,292.000 200.400 C 291.780 200.400,291.600 200.738,291.600 201.151 C 291.600 201.564,291.330 202.126,291.000 202.400 C 290.670 202.674,290.400 203.066,290.400 203.271 C 290.400 203.476,289.680 204.704,288.800 206.000 L 287.200 208.356 287.200 213.778 C 287.200 218.933,287.161 219.200,286.400 219.200 C 285.778 219.200,285.600 219.467,285.600 220.400 C 285.600 221.060,285.420 221.600,285.200 221.600 C 284.980 221.600,284.800 221.960,284.800 222.400 C 284.800 222.840,284.620 223.200,284.400 223.200 C 284.180 223.200,284.000 223.560,284.000 224.000 C 284.000 224.440,283.820 224.800,283.600 224.800 C 283.380 224.800,283.200 225.070,283.200 225.400 C 283.200 225.730,283.020 226.000,282.800 226.000 C 282.580 226.000,282.400 226.720,282.400 227.600 C 282.400 228.480,282.220 229.200,282.000 229.200 C 281.780 229.200,281.600 229.740,281.600 230.400 C 281.600 231.060,281.420 231.600,281.200 231.600 C 280.980 231.600,280.800 231.960,280.800 232.400 C 280.800 232.933,280.533 233.200,280.000 233.200 C 279.467 233.200,279.200 233.467,279.200 234.000 C 279.200 234.440,279.020 234.800,278.800 234.800 C 278.580 234.800,278.400 235.160,278.400 235.600 C 278.400 236.061,278.133 236.400,277.771 236.400 C 276.880 236.400,276.000 237.393,276.000 238.400 C 276.000 238.871,275.730 239.527,275.400 239.857 C 275.070 240.187,274.800 240.822,274.800 241.268 C 274.800 241.714,274.260 242.583,273.600 243.200 C 272.940 243.817,272.400 244.609,272.400 244.960 C 272.400 245.312,272.220 245.600,272.000 245.600 C 271.780 245.600,271.600 245.960,271.600 246.400 C 271.600 246.840,271.420 247.200,271.200 247.200 C 270.980 247.200,270.800 247.740,270.800 248.400 C 270.800 249.333,270.622 249.600,270.000 249.600 C 269.467 249.600,269.200 249.867,269.200 250.400 C 269.200 250.933,268.933 251.200,268.400 251.200 C 267.867 251.200,267.600 251.467,267.600 252.000 C 267.600 252.533,267.333 252.800,266.800 252.800 C 266.360 252.800,266.000 252.980,266.000 253.200 C 266.000 253.420,265.640 253.600,265.200 253.600 C 264.667 253.600,264.400 253.867,264.400 254.400 C 264.400 254.840,264.220 255.200,264.000 255.200 C 263.780 255.200,263.600 255.520,263.600 255.912 C 263.600 256.303,263.240 256.883,262.800 257.200 C 262.360 257.517,262.000 258.187,262.000 258.688 C 262.000 259.333,261.766 259.600,261.200 259.600 C 260.760 259.600,260.400 259.780,260.400 260.000 C 260.400 260.220,260.040 260.400,259.600 260.400 C 259.067 260.400,258.800 260.667,258.800 261.200 C 258.800 261.644,258.533 262.000,258.200 262.000 C 257.870 262.000,257.600 262.180,257.600 262.400 C 257.600 262.620,257.060 262.800,256.400 262.800 C 255.467 262.800,255.200 262.978,255.200 263.600 C 255.200 264.133,254.933 264.400,254.400 264.400 C 253.960 264.400,253.600 264.580,253.600 264.800 C 253.600 265.020,253.240 265.200,252.800 265.200 C 252.267 265.200,252.000 265.467,252.000 266.000 C 252.000 266.533,251.733 266.800,251.200 266.800 C 250.727 266.800,250.400 267.067,250.400 267.453 C 250.400 267.812,250.025 268.431,249.568 268.828 C 248.737 269.548,248.741 269.556,251.268 272.109 C 252.660 273.516,261.248 282.257,270.352 291.534 C 279.455 300.810,287.201 308.400,287.565 308.400 C 287.930 308.400,291.047 305.565,294.492 302.100 C 330.920 265.467,399.129 197.600,399.521 197.600 C 400.256 197.600,400.036 55.545,399.300 55.300 C 399.013 55.204,398.800 54.464,398.800 53.567 C 398.800 52.705,398.620 52.000,398.400 52.000 C 398.180 52.000,398.000 51.280,398.000 50.400 C 398.000 49.520,397.820 48.800,397.600 48.800 C 397.380 48.800,397.200 48.260,397.200 47.600 C 397.200 46.940,397.020 46.400,396.800 46.400 C 396.580 46.400,396.400 46.128,396.400 45.795 C 396.400 45.462,396.232 44.877,396.026 44.495 C 395.821 44.113,395.417 43.215,395.129 42.500 C 394.840 41.785,394.469 41.200,394.302 41.200 C 394.136 41.200,394.000 40.660,394.000 40.000 C 394.000 39.340,393.850 38.800,393.666 38.800 C 393.482 38.800,392.631 37.360,391.775 35.600 C 390.919 33.840,390.080 32.400,389.910 32.400 C 389.739 32.400,389.600 32.158,389.600 31.862 C 389.600 31.566,389.240 30.998,388.800 30.600 C 388.360 30.202,388.000 29.662,388.000 29.400 C 388.000 29.138,387.640 28.598,387.200 28.200 C 386.760 27.802,386.400 27.327,386.400 27.144 C 386.400 26.525,378.896 18.766,375.428 15.800 C 374.400 14.920,373.072 13.777,372.479 13.260 C 371.886 12.742,370.590 11.851,369.600 11.279 C 368.610 10.707,367.710 10.116,367.600 9.967 C 367.490 9.817,366.005 9.025,364.300 8.206 C 362.595 7.388,361.200 6.557,361.200 6.359 C 361.200 6.162,360.845 6.000,360.412 6.000 C 359.979 6.000,358.983 5.640,358.200 5.200 C 357.417 4.760,356.511 4.400,356.188 4.400 C 355.865 4.400,355.600 4.220,355.600 4.000 C 355.600 3.780,355.049 3.600,354.376 3.600 C 353.663 3.600,353.256 3.433,353.400 3.200 C 353.547 2.961,353.063 2.800,352.200 2.800 C 351.337 2.800,350.853 2.639,351.000 2.400 C 351.149 2.158,350.604 2.000,349.624 2.000 C 348.731 2.000,348.000 1.820,348.000 1.600 C 348.000 1.380,347.295 1.200,346.433 1.200 C 345.536 1.200,344.796 0.987,344.700 0.700 C 344.544 0.232,63.742 -0.167,57.300 0.292 M175.106 114.700 L 175.000 127.000 165.109 127.211 C 158.095 127.361,155.076 127.564,154.729 127.911 C 154.460 128.180,153.914 128.400,153.515 128.400 C 153.116 128.400,152.477 128.559,152.095 128.753 C 151.713 128.948,150.860 129.349,150.200 129.644 C 143.126 132.814,137.195 139.327,133.943 147.499 C 132.538 151.029,131.937 159.534,132.811 163.523 C 133.038 164.555,133.418 166.300,133.657 167.400 C 135.583 176.271,142.607 184.532,150.800 187.563 C 151.570 187.848,152.560 188.218,153.000 188.385 C 155.988 189.521,157.270 189.600,172.728 189.600 L 188.800 189.600 188.800 146.000 L 188.800 102.400 182.006 102.400 L 175.212 102.400 175.106 114.700 M203.600 150.786 C 203.600 176.693,203.563 176.258,206.062 179.890 C 208.758 183.809,215.672 188.800,218.406 188.800 C 218.817 188.800,219.264 188.980,219.400 189.200 C 219.559 189.458,226.671 189.600,239.424 189.600 L 259.200 189.600 259.200 158.400 L 259.200 127.200 252.403 127.200 L 245.606 127.200 245.503 151.700 L 245.400 176.200 234.875 176.307 C 223.332 176.424,223.251 176.411,220.257 173.942 C 219.425 173.257,218.307 172.003,217.772 171.156 L 216.800 169.616 216.800 148.408 L 216.800 127.200 210.200 127.200 L 203.600 127.200 203.600 150.786 M175.104 158.300 L 175.000 176.200 166.885 176.200 C 161.923 176.200,158.660 176.044,158.485 175.799 C 158.328 175.579,157.681 175.131,157.048 174.804 C 147.542 169.896,145.603 154.008,153.427 145.131 C 154.874 143.489,158.089 141.200,158.948 141.200 C 159.281 141.200,159.664 141.020,159.800 140.800 C 159.951 140.556,163.006 140.400,167.628 140.400 L 175.208 140.400 175.104 158.300 \"\n          stroke=\"none\"\n          fill=\"#ecf1f5\"\n          fill-rule=\"evenodd\"\n        ></path>\n        <path\n          d=\"M0.095 216.780 C 0.178 317.878,0.303 344.063,0.700 344.460 C 0.975 344.735,1.200 345.644,1.200 346.480 C 1.200 347.316,1.380 348.000,1.600 348.000 C 1.820 348.000,2.000 348.542,2.000 349.205 C 2.000 350.364,2.115 350.716,3.138 352.695 C 3.392 353.187,3.600 353.941,3.600 354.371 C 3.600 354.801,3.780 355.264,4.000 355.400 C 4.220 355.536,4.400 355.997,4.400 356.424 C 4.400 356.851,4.580 357.200,4.800 357.200 C 5.020 357.200,5.200 357.560,5.200 358.000 C 5.200 358.440,5.380 358.800,5.600 358.800 C 5.820 358.800,6.000 359.053,6.000 359.362 C 6.000 360.028,7.668 363.341,8.100 363.533 C 8.265 363.607,8.400 364.012,8.400 364.433 C 8.400 364.855,8.536 365.200,8.702 365.200 C 8.869 365.200,9.245 365.743,9.539 366.407 C 10.184 367.865,13.607 372.946,14.070 373.133 C 14.252 373.207,14.400 373.426,14.400 373.620 C 14.400 373.815,15.480 375.095,16.800 376.465 C 18.120 377.835,19.200 379.089,19.200 379.251 C 19.200 379.413,19.563 379.661,20.006 379.802 C 20.449 379.943,20.708 380.225,20.582 380.429 C 20.456 380.633,20.504 380.800,20.689 380.800 C 20.874 380.800,21.969 381.700,23.122 382.800 C 24.275 383.900,25.440 384.770,25.709 384.734 C 25.979 384.698,54.441 356.367,88.957 321.776 L 151.714 258.883 148.870 254.942 C 147.306 252.774,145.881 250.820,145.702 250.600 C 145.524 250.380,144.942 249.570,144.408 248.800 C 143.875 248.030,143.331 247.310,143.200 247.200 C 143.069 247.090,142.529 246.370,142.000 245.600 C 141.471 244.830,140.932 244.110,140.802 244.000 C 140.672 243.890,139.409 242.270,137.994 240.400 C 136.580 238.530,134.967 236.450,134.411 235.778 C 133.855 235.106,132.950 233.952,132.400 233.215 C 131.487 231.989,128.255 227.852,127.076 226.400 C 126.808 226.070,125.961 224.990,125.194 224.000 C 124.428 223.010,123.710 222.110,123.600 222.000 C 123.010 221.410,119.053 216.598,116.709 213.619 C 115.229 211.739,113.656 209.750,113.214 209.200 C 112.772 208.650,112.408 208.057,112.405 207.883 C 112.402 207.709,112.069 207.211,111.664 206.777 C 111.259 206.342,110.674 205.495,110.365 204.893 C 110.055 204.292,109.711 203.710,109.601 203.600 C 109.490 203.490,109.158 202.970,108.862 202.445 C 108.567 201.920,107.952 200.840,107.497 200.045 C 107.042 199.250,105.973 197.250,105.121 195.600 C 103.692 192.833,1.602 89.600,0.295 89.600 C 0.127 89.600,0.036 146.831,0.095 216.780 M331.800 332.009 L 263.800 400.022 303.880 399.911 C 335.291 399.824,344.068 399.692,344.460 399.300 C 344.735 399.025,345.644 398.800,346.480 398.800 C 347.316 398.800,348.000 398.620,348.000 398.400 C 348.000 398.180,348.428 398.000,348.951 398.000 C 349.474 398.000,350.554 397.728,351.351 397.395 C 352.148 397.062,352.800 396.918,352.800 397.075 C 352.800 397.232,353.016 397.144,353.280 396.880 C 353.544 396.616,354.084 396.400,354.480 396.400 C 354.876 396.400,355.200 396.220,355.200 396.000 C 355.200 395.780,355.650 395.600,356.200 395.600 C 356.750 395.600,357.200 395.420,357.200 395.200 C 357.200 394.980,357.560 394.800,358.000 394.800 C 358.440 394.800,358.800 394.620,358.800 394.400 C 358.800 394.180,359.160 394.000,359.600 394.000 C 360.040 394.000,360.400 393.820,360.400 393.600 C 360.400 393.380,360.634 393.200,360.920 393.200 C 361.656 393.200,363.593 392.259,363.597 391.900 C 363.599 391.735,363.960 391.600,364.400 391.600 C 364.840 391.600,365.200 391.420,365.200 391.200 C 365.200 390.980,365.545 390.800,365.967 390.800 C 366.388 390.800,366.793 390.665,366.867 390.500 C 366.977 390.251,368.821 388.949,373.518 385.800 C 374.283 385.287,380.220 379.702,381.344 378.437 C 381.815 377.907,382.965 376.697,383.900 375.748 C 384.835 374.798,385.600 373.851,385.600 373.644 C 385.600 373.436,385.753 373.207,385.939 373.133 C 386.126 373.060,387.161 371.650,388.239 370.000 C 389.318 368.350,390.335 366.940,390.500 366.867 C 390.665 366.793,390.800 366.388,390.800 365.967 C 390.800 365.545,390.980 365.200,391.200 365.200 C 391.420 365.200,391.600 364.840,391.600 364.400 C 391.600 363.960,391.735 363.599,391.900 363.597 C 392.259 363.593,393.200 361.656,393.200 360.920 C 393.200 360.634,393.380 360.400,393.600 360.400 C 393.820 360.400,394.000 360.040,394.000 359.600 C 394.000 359.160,394.180 358.800,394.400 358.800 C 394.620 358.800,394.800 358.440,394.800 358.000 C 394.800 357.560,394.980 357.200,395.200 357.200 C 395.420 357.200,395.600 356.750,395.600 356.200 C 395.600 355.650,395.780 355.200,396.000 355.200 C 396.220 355.200,396.400 354.876,396.400 354.480 C 396.400 354.084,396.616 353.544,396.880 353.280 C 397.144 353.016,397.232 352.800,397.075 352.800 C 396.918 352.800,397.062 352.148,397.395 351.351 C 397.728 350.554,398.000 349.474,398.000 348.951 C 398.000 348.428,398.180 348.000,398.400 348.000 C 398.620 348.000,398.800 347.316,398.800 346.480 C 398.800 345.644,399.025 344.735,399.300 344.460 C 399.772 343.988,400.268 283.002,399.916 268.698 L 399.800 263.997 331.800 332.009 M242.400 266.600 C 242.400 266.930,242.220 267.200,242.000 267.200 C 241.780 267.200,241.600 267.455,241.600 267.767 C 241.600 268.078,241.460 268.393,241.288 268.467 C 241.117 268.540,240.132 269.950,239.100 271.600 C 238.067 273.250,237.062 274.791,236.865 275.025 C 236.669 275.259,236.277 275.889,235.994 276.425 C 235.712 276.961,235.372 277.490,235.240 277.600 C 235.108 277.710,234.563 278.610,234.030 279.600 C 233.496 280.590,232.949 281.490,232.813 281.600 C 232.130 282.153,231.264 284.610,231.698 284.760 C 231.952 284.848,232.229 284.713,232.313 284.460 C 232.398 284.207,233.132 284.000,233.945 284.000 C 234.965 284.000,235.602 283.752,236.000 283.200 C 236.317 282.760,236.897 282.400,237.288 282.400 C 237.733 282.400,238.000 282.100,238.000 281.600 C 238.000 281.067,238.267 280.800,238.800 280.800 C 239.333 280.800,239.600 280.533,239.600 280.000 C 239.600 279.467,239.867 279.200,240.400 279.200 C 240.840 279.200,241.200 279.020,241.200 278.800 C 241.200 278.580,241.650 278.400,242.200 278.400 C 242.933 278.400,243.200 278.187,243.200 277.600 C 243.200 277.003,243.467 276.800,244.253 276.800 C 244.832 276.800,245.597 276.469,245.953 276.064 C 246.309 275.659,247.095 275.206,247.700 275.056 C 248.305 274.907,248.800 274.608,248.800 274.392 C 248.800 274.177,249.160 274.000,249.600 274.000 C 250.862 274.000,250.617 273.607,246.900 269.680 C 243.516 266.105,242.400 265.341,242.400 266.600 M115.403 344.800 L 60.213 400.000 128.606 399.986 L 197.000 399.971 225.518 371.686 C 241.202 356.129,254.027 343.214,254.018 342.986 C 253.990 342.333,219.713 307.620,219.403 307.930 C 219.291 308.042,219.200 308.463,219.200 308.867 C 219.200 309.270,219.020 309.600,218.800 309.600 C 218.580 309.600,218.400 309.960,218.400 310.400 C 218.400 310.840,218.220 311.200,218.000 311.200 C 217.780 311.200,217.600 311.472,217.600 311.805 C 217.600 312.138,217.420 312.768,217.200 313.205 C 216.980 313.642,216.620 314.358,216.400 314.795 C 216.180 315.232,216.000 315.862,216.000 316.195 C 216.000 316.528,215.820 316.800,215.600 316.800 C 215.380 316.800,215.200 317.160,215.200 317.600 C 215.200 318.040,215.020 318.400,214.800 318.400 C 214.580 318.400,214.400 318.755,214.400 319.188 C 214.400 319.621,214.040 320.617,213.600 321.400 C 213.160 322.183,212.800 323.179,212.800 323.612 C 212.800 324.045,212.620 324.400,212.400 324.400 C 212.180 324.400,212.000 324.760,212.000 325.200 C 212.000 325.640,211.820 326.000,211.600 326.000 C 211.380 326.000,211.200 326.540,211.200 327.200 C 211.200 327.860,211.020 328.400,210.800 328.400 C 210.580 328.400,210.400 328.749,210.400 329.176 C 210.400 329.603,210.220 330.064,210.000 330.200 C 209.780 330.336,209.600 330.887,209.600 331.424 C 209.600 331.961,209.440 332.400,209.245 332.400 C 209.050 332.400,208.806 332.895,208.702 333.500 C 207.786 338.850,205.494 344.000,204.029 344.000 C 203.793 344.000,203.600 344.180,203.600 344.400 C 203.600 344.620,203.161 344.800,202.624 344.800 C 202.087 344.800,201.536 344.980,201.400 345.200 C 201.264 345.420,200.443 345.600,199.576 345.600 C 198.709 345.600,198.000 345.420,198.000 345.200 C 198.000 344.980,197.651 344.800,197.224 344.800 C 196.208 344.800,192.800 341.430,192.800 340.426 C 192.800 339.998,192.620 339.536,192.400 339.400 C 192.180 339.264,192.000 338.544,192.000 337.800 C 192.000 337.056,191.820 336.336,191.600 336.200 C 191.380 336.064,191.200 335.601,191.200 335.171 C 191.200 334.741,191.041 334.077,190.847 333.695 C 190.371 332.760,189.782 331.293,189.200 329.600 C 188.610 327.881,188.256 326.953,187.600 325.400 C 187.321 324.740,186.955 323.840,186.786 323.400 C 186.618 322.960,186.102 321.747,185.640 320.704 C 185.178 319.662,184.800 318.722,184.800 318.616 C 184.800 318.510,184.368 317.473,183.841 316.312 C 183.313 315.150,182.408 313.068,181.829 311.685 C 181.251 310.301,179.972 307.513,178.989 305.489 C 178.005 303.465,177.200 301.597,177.200 301.338 C 177.200 301.079,177.059 300.807,176.888 300.733 C 176.716 300.660,175.347 298.125,173.846 295.100 C 172.345 292.075,170.999 289.600,170.855 289.600 C 170.711 289.600,145.758 314.440,115.403 344.800 \"\n          stroke=\"none\"\n          fill=\"#c2e18a\"\n          fill-rule=\"evenodd\"\n        ></path>\n        <path\n          d=\"M9.689 32.959 C 8.960 34.087,8.400 35.341,8.400 35.846 C 8.400 36.151,8.220 36.400,8.000 36.400 C 7.780 36.400,7.600 36.681,7.600 37.024 C 7.600 37.367,7.420 37.536,7.200 37.400 C 6.980 37.264,6.800 37.523,6.800 37.976 C 6.800 38.429,6.620 38.800,6.400 38.800 C 6.180 38.800,6.000 39.340,6.000 40.000 C 6.000 40.660,5.820 41.200,5.600 41.200 C 5.380 41.200,5.200 41.560,5.200 42.000 C 5.200 42.440,5.059 42.800,4.887 42.800 C 4.715 42.800,4.335 43.610,4.043 44.600 C 3.751 45.590,3.352 46.400,3.156 46.400 C 2.960 46.400,2.800 46.940,2.800 47.600 C 2.800 48.260,2.620 48.800,2.400 48.800 C 2.180 48.800,2.000 49.509,2.000 50.376 C 2.000 51.243,1.820 52.064,1.600 52.200 C 1.380 52.336,1.200 53.052,1.200 53.790 C 1.200 54.529,0.975 55.208,0.700 55.300 C 0.312 55.429,0.187 59.257,0.142 72.433 L 0.083 89.400 51.894 141.000 C 80.390 169.380,103.602 192.330,103.476 192.000 C 103.351 191.670,102.708 190.103,102.049 188.518 C 95.814 173.545,93.112 157.053,94.264 141.000 C 94.532 137.260,94.958 133.030,95.210 131.600 C 96.232 125.803,96.860 122.832,97.548 120.526 C 97.827 119.593,97.805 119.298,97.465 119.425 C 97.209 119.520,77.419 100.005,53.487 76.058 C 27.403 49.958,9.860 32.695,9.689 32.959 M196.500 42.297 C 198.205 42.372,200.995 42.372,202.700 42.297 C 204.405 42.222,203.010 42.161,199.600 42.161 C 196.190 42.161,194.795 42.222,196.500 42.297 M188.986 123.000 C 188.986 134.220,189.037 138.868,189.100 133.328 C 189.162 127.788,189.162 118.608,189.100 112.928 C 189.037 107.248,188.986 111.780,188.986 123.000 M166.200 126.800 L 157.400 127.024 166.076 127.112 C 171.526 127.167,174.845 127.051,175.000 126.800 C 175.136 126.580,175.192 126.440,175.124 126.488 C 175.056 126.537,171.040 126.677,166.200 126.800 M203.462 127.100 C 203.360 127.265,206.392 127.400,210.200 127.400 C 214.008 127.400,217.040 127.265,216.938 127.100 C 216.836 126.935,213.804 126.800,210.200 126.800 C 206.596 126.800,203.564 126.935,203.462 127.100 M248.900 127.098 C 250.825 127.171,253.975 127.171,255.900 127.098 C 257.825 127.025,256.250 126.965,252.400 126.965 C 248.550 126.965,246.975 127.025,248.900 127.098 M140.975 135.700 L 139.800 137.000 141.100 135.825 C 142.312 134.730,142.584 134.400,142.275 134.400 C 142.206 134.400,141.621 134.985,140.975 135.700 M162.800 140.674 C 169.198 140.962,175.110 140.975,174.939 140.700 C 174.837 140.535,171.478 140.435,167.476 140.478 C 163.474 140.521,161.370 140.609,162.800 140.674 M305.293 143.600 C 305.293 144.370,305.375 144.685,305.476 144.300 C 305.576 143.915,305.576 143.285,305.476 142.900 C 305.375 142.515,305.293 142.830,305.293 143.600 M305.293 152.000 C 305.293 152.770,305.375 153.085,305.476 152.700 C 305.576 152.315,305.576 151.685,305.476 151.300 C 305.375 150.915,305.293 151.230,305.293 152.000 M132.146 157.800 C 132.147 160.000,132.214 160.849,132.295 159.687 C 132.376 158.524,132.376 156.724,132.293 155.687 C 132.211 154.649,132.145 155.600,132.146 157.800 M168.000 176.000 L 161.000 176.229 167.876 176.314 C 172.124 176.367,174.847 176.247,175.000 176.000 C 175.136 175.780,175.192 175.639,175.124 175.686 C 175.056 175.733,171.850 175.874,168.000 176.000 M229.276 176.299 C 232.068 176.367,236.748 176.368,239.676 176.299 C 242.604 176.231,240.320 176.175,234.600 176.174 C 228.880 176.174,226.484 176.230,229.276 176.299 M140.800 181.400 C 141.546 182.170,142.247 182.800,142.357 182.800 C 142.467 182.800,141.946 182.170,141.200 181.400 C 140.454 180.630,139.753 180.000,139.643 180.000 C 139.533 180.000,140.054 180.630,140.800 181.400 M164.873 189.899 C 169.204 189.964,176.404 189.964,180.873 189.900 C 185.343 189.835,181.800 189.782,173.000 189.782 C 164.200 189.782,160.543 189.835,164.873 189.899 M230.300 189.900 C 235.635 189.963,244.365 189.963,249.700 189.900 C 255.035 189.837,250.670 189.785,240.000 189.785 C 229.330 189.785,224.965 189.837,230.300 189.900 M343.800 253.600 C 313.221 284.180,287.931 309.200,287.602 309.200 C 287.272 309.200,277.119 299.345,265.038 287.300 C 252.957 275.255,244.574 267.065,246.409 269.100 C 248.244 271.135,249.893 272.800,250.073 272.800 C 250.253 272.800,250.400 273.070,250.400 273.400 C 250.400 273.733,250.044 274.000,249.600 274.000 C 249.160 274.000,248.800 274.177,248.800 274.392 C 248.800 274.608,248.305 274.907,247.700 275.056 C 247.095 275.206,246.309 275.659,245.953 276.064 C 245.597 276.469,244.832 276.800,244.253 276.800 C 243.467 276.800,243.200 277.003,243.200 277.600 C 243.200 278.187,242.933 278.400,242.200 278.400 C 241.650 278.400,241.200 278.580,241.200 278.800 C 241.200 279.020,240.840 279.200,240.400 279.200 C 239.867 279.200,239.600 279.467,239.600 280.000 C 239.600 280.533,239.333 280.800,238.800 280.800 C 238.267 280.800,238.000 281.067,238.000 281.600 C 238.000 282.100,237.733 282.400,237.288 282.400 C 236.897 282.400,236.317 282.760,236.000 283.200 C 235.598 283.757,234.965 284.000,233.912 284.000 C 233.080 284.000,232.400 284.180,232.400 284.400 C 232.400 284.620,232.040 284.800,231.600 284.800 C 231.067 284.800,230.800 285.067,230.800 285.600 C 230.800 286.040,230.620 286.400,230.400 286.400 C 230.180 286.400,230.000 286.760,230.000 287.200 C 230.000 287.640,229.820 288.000,229.600 288.000 C 229.380 288.000,229.200 288.360,229.200 288.800 C 229.200 289.240,229.020 289.600,228.800 289.600 C 228.580 289.600,228.400 289.917,228.400 290.304 C 228.400 290.691,228.040 291.232,227.600 291.507 C 227.160 291.782,226.800 292.275,226.800 292.603 C 226.800 292.932,226.620 293.200,226.400 293.200 C 226.180 293.200,226.000 293.560,226.000 294.000 C 226.000 294.440,225.820 294.800,225.600 294.800 C 225.380 294.800,225.200 295.016,225.200 295.281 C 225.200 295.545,224.325 297.570,223.256 299.781 C 222.187 301.991,220.987 304.520,220.589 305.400 C 220.191 306.280,219.789 307.145,219.695 307.323 C 219.602 307.500,223.121 311.280,227.515 315.723 C 248.093 336.524,254.001 342.602,254.018 342.986 C 254.027 343.214,241.202 356.129,225.518 371.686 L 197.000 399.971 230.400 399.986 L 263.801 400.000 331.900 331.900 L 400.000 263.799 400.000 230.900 C 400.000 212.805,399.865 198.000,399.699 198.000 C 399.534 198.000,374.379 223.020,343.800 253.600 M152.400 260.000 C 152.870 260.660,153.344 261.200,153.454 261.200 C 153.564 261.200,153.270 260.660,152.800 260.000 C 152.330 259.340,151.856 258.800,151.746 258.800 C 151.636 258.800,151.930 259.340,152.400 260.000 \"\n          stroke=\"none\"\n          fill=\"#f0e195\"\n          fill-rule=\"evenodd\"\n        ></path>\n        <path\n          d=\"M53.918 76.483 C 89.517 112.086,97.284 119.669,97.697 119.224 C 97.974 118.926,98.001 118.794,97.758 118.929 C 97.512 119.066,78.290 100.139,54.358 76.195 C 30.731 52.556,11.229 33.211,11.021 33.207 C 10.812 33.203,30.116 52.677,53.918 76.483 M126.975 70.900 L 125.800 72.200 127.100 71.025 C 127.815 70.379,128.400 69.794,128.400 69.725 C 128.400 69.416,128.070 69.688,126.975 70.900 M122.581 75.300 L 121.000 77.000 122.700 75.419 C 124.281 73.948,124.584 73.600,124.281 73.600 C 124.216 73.600,123.451 74.365,122.581 75.300 M276.800 75.725 C 276.800 75.794,277.385 76.379,278.100 77.025 L 279.400 78.200 278.225 76.900 C 277.130 75.688,276.800 75.416,276.800 75.725 M284.830 84.981 C 285.176 85.431,286.099 86.790,286.879 88.000 C 287.660 89.210,289.042 91.353,289.950 92.762 C 290.857 94.171,291.600 95.103,291.600 94.833 C 291.600 94.333,289.651 90.764,289.179 90.400 C 289.036 90.290,288.698 89.780,288.428 89.266 C 287.904 88.272,286.829 86.921,285.200 85.211 C 284.650 84.634,284.483 84.530,284.830 84.981 M292.400 96.950 C 292.400 97.307,294.506 100.827,294.640 100.693 C 294.865 100.468,293.043 96.821,292.700 96.810 C 292.535 96.804,292.400 96.867,292.400 96.950 M295.600 103.353 C 295.600 103.683,295.780 104.064,296.000 104.200 C 296.220 104.336,296.400 104.177,296.400 103.847 C 296.400 103.517,296.220 103.136,296.000 103.000 C 295.780 102.864,295.600 103.023,295.600 103.353 M298.006 108.876 C 298.018 109.881,298.787 110.708,298.794 109.724 C 298.797 109.242,298.620 108.736,298.400 108.600 C 298.180 108.464,298.003 108.588,298.006 108.876 M298.806 111.100 C 298.824 111.977,299.588 112.559,299.594 111.700 C 299.597 111.205,299.420 110.800,299.200 110.800 C 298.980 110.800,298.803 110.935,298.806 111.100 M299.628 113.076 C 299.718 114.115,300.344 114.996,300.372 114.124 C 300.387 113.642,300.220 113.136,300.000 113.000 C 299.780 112.864,299.613 112.898,299.628 113.076 M300.646 116.266 C 301.293 118.903,301.941 120.299,301.972 119.124 C 301.987 118.532,301.820 117.936,301.600 117.800 C 301.380 117.664,301.200 117.124,301.200 116.600 C 301.200 116.076,301.013 115.532,300.784 115.390 C 300.511 115.221,300.463 115.521,300.646 116.266 M302.244 122.100 C 302.367 122.815,302.617 123.850,302.801 124.400 C 303.713 127.141,305.001 137.222,305.457 145.196 C 305.851 152.079,304.523 164.481,302.546 172.384 C 301.894 174.992,301.875 175.324,302.400 175.000 C 302.620 174.864,302.800 174.169,302.800 173.456 C 302.800 172.743,302.962 171.989,303.159 171.780 C 303.356 171.571,303.621 170.680,303.747 169.800 C 303.874 168.920,304.162 167.030,304.389 165.600 C 306.221 154.063,306.214 140.858,304.372 130.200 C 304.143 128.880,303.859 126.945,303.740 125.900 C 303.620 124.855,303.360 124.000,303.161 124.000 C 302.963 124.000,302.800 123.280,302.800 122.400 C 302.800 121.520,302.625 120.800,302.410 120.800 C 302.191 120.800,302.118 121.369,302.244 122.100 M203.388 151.000 C 203.388 163.980,203.438 169.232,203.500 162.671 C 203.562 156.111,203.561 145.491,203.500 139.071 C 203.438 132.652,203.387 138.020,203.388 151.000 M216.986 148.800 C 216.986 160.570,217.037 165.385,217.100 159.500 C 217.162 153.615,217.162 143.985,217.100 138.100 C 217.037 132.215,216.986 137.030,216.986 148.800 M301.508 176.383 C 301.231 177.367,301.397 177.937,301.832 177.501 C 301.960 177.373,302.001 176.848,301.924 176.334 L 301.784 175.400 301.508 176.383 M300.300 180.436 C 299.491 183.019,299.453 183.338,300.000 183.000 C 300.220 182.864,300.400 182.349,300.400 181.856 C 300.400 181.363,300.595 180.765,300.834 180.526 C 301.072 180.288,301.207 179.667,301.134 179.146 C 301.034 178.442,300.821 178.772,300.300 180.436 M298.279 186.157 C 298.115 186.574,298.075 187.009,298.191 187.124 C 298.555 187.489,298.876 186.891,298.724 186.131 C 298.583 185.435,298.562 185.436,298.279 186.157 M297.479 188.157 C 297.315 188.574,297.275 189.009,297.391 189.124 C 297.755 189.489,298.076 188.891,297.924 188.131 C 297.783 187.435,297.762 187.436,297.479 188.157 M349.888 246.700 C 322.866 273.705,297.938 298.635,294.492 302.100 C 291.047 305.565,287.930 308.400,287.565 308.400 C 287.201 308.400,279.455 300.810,270.352 291.534 C 261.248 282.257,252.660 273.516,251.268 272.109 C 248.741 269.556,248.737 269.548,249.568 268.828 C 250.025 268.431,250.400 267.812,250.400 267.453 C 250.400 267.067,250.727 266.800,251.200 266.800 C 251.733 266.800,252.000 266.533,252.000 266.000 C 252.000 265.467,252.267 265.200,252.800 265.200 C 253.240 265.200,253.600 265.020,253.600 264.800 C 253.600 264.580,253.960 264.400,254.400 264.400 C 254.933 264.400,255.200 264.133,255.200 263.600 C 255.200 262.978,255.467 262.800,256.400 262.800 C 257.060 262.800,257.600 262.620,257.600 262.400 C 257.600 262.180,257.870 262.000,258.200 262.000 C 258.533 262.000,258.800 261.644,258.800 261.200 C 258.800 260.667,259.067 260.400,259.600 260.400 C 260.040 260.400,260.400 260.220,260.400 260.000 C 260.400 259.780,260.760 259.600,261.200 259.600 C 261.766 259.600,262.000 259.333,262.000 258.688 C 262.000 258.187,262.360 257.517,262.800 257.200 C 263.240 256.883,263.600 256.303,263.600 255.912 C 263.600 255.520,263.780 255.200,264.000 255.200 C 264.220 255.200,264.400 254.840,264.400 254.400 C 264.400 253.867,264.667 253.600,265.200 253.600 C 265.640 253.600,266.000 253.420,266.000 253.200 C 266.000 252.980,266.360 252.800,266.800 252.800 C 267.333 252.800,267.600 252.533,267.600 252.000 C 267.600 251.467,267.867 251.200,268.400 251.200 C 268.933 251.200,269.200 250.933,269.200 250.400 C 269.200 249.867,269.467 249.600,270.000 249.600 C 270.622 249.600,270.800 249.333,270.800 248.400 C 270.800 247.740,270.980 247.200,271.200 247.200 C 271.420 247.200,271.600 246.840,271.600 246.400 C 271.600 245.960,271.780 245.600,272.000 245.600 C 272.220 245.600,272.400 245.312,272.400 244.960 C 272.400 244.609,272.940 243.817,273.600 243.200 C 274.260 242.583,274.800 241.714,274.800 241.268 C 274.800 240.822,275.070 240.187,275.400 239.857 C 275.730 239.527,276.000 238.871,276.000 238.400 C 276.000 237.393,276.880 236.400,277.771 236.400 C 278.133 236.400,278.400 236.061,278.400 235.600 C 278.400 235.160,278.580 234.800,278.800 234.800 C 279.020 234.800,279.200 234.440,279.200 234.000 C 279.200 233.467,279.467 233.200,280.000 233.200 C 280.533 233.200,280.800 232.933,280.800 232.400 C 280.800 231.960,280.980 231.600,281.200 231.600 C 281.420 231.600,281.600 231.060,281.600 230.400 C 281.600 229.740,281.780 229.200,282.000 229.200 C 282.220 229.200,282.400 228.480,282.400 227.600 C 282.400 226.720,282.580 226.000,282.800 226.000 C 283.020 226.000,283.200 225.730,283.200 225.400 C 283.200 225.070,283.380 224.800,283.600 224.800 C 283.820 224.800,284.000 224.440,284.000 224.000 C 284.000 223.560,284.180 223.200,284.400 223.200 C 284.620 223.200,284.800 222.840,284.800 222.400 C 284.800 221.960,284.980 221.600,285.200 221.600 C 285.420 221.600,285.600 221.060,285.600 220.400 C 285.600 219.467,285.778 219.200,286.400 219.200 C 287.161 219.200,287.200 218.933,287.200 213.778 L 287.200 208.356 288.800 206.000 C 289.680 204.704,290.400 203.513,290.400 203.353 C 290.400 203.194,290.688 202.744,291.041 202.355 C 291.394 201.965,291.605 201.415,291.511 201.133 C 291.417 200.850,290.824 201.515,290.194 202.610 C 287.923 206.556,281.218 215.806,279.619 217.200 C 279.492 217.310,278.584 218.390,277.600 219.600 C 276.616 220.810,275.719 221.890,275.605 222.000 C 275.492 222.110,274.772 223.010,274.006 224.000 C 273.239 224.990,272.391 226.070,272.122 226.400 C 271.258 227.460,265.034 235.442,264.000 236.815 C 263.450 237.545,262.550 238.693,262.000 239.366 C 260.623 241.051,260.454 241.273,257.096 245.800 C 250.376 254.861,247.267 259.137,245.607 261.600 C 244.644 263.030,243.708 264.260,243.528 264.333 C 243.347 264.407,243.200 264.677,243.200 264.935 C 243.200 265.629,286.903 309.200,287.599 309.200 C 287.928 309.200,313.309 284.090,344.001 253.400 C 374.694 222.710,399.630 197.600,399.413 197.600 C 399.197 197.600,376.911 219.695,349.888 246.700 M88.461 322.141 L 25.525 385.081 28.262 387.050 C 32.983 390.445,34.908 391.600,35.846 391.600 C 36.151 391.600,36.400 391.780,36.400 392.000 C 36.400 392.220,36.760 392.400,37.200 392.400 C 37.640 392.400,38.000 392.580,38.000 392.800 C 38.000 393.020,38.360 393.200,38.800 393.200 C 39.240 393.200,39.600 393.380,39.600 393.600 C 39.600 393.820,39.960 394.000,40.400 394.000 C 40.840 394.000,41.200 394.180,41.200 394.400 C 41.200 394.620,41.560 394.800,42.000 394.800 C 42.440 394.800,42.800 394.980,42.800 395.200 C 42.800 395.420,43.149 395.600,43.576 395.600 C 44.003 395.600,44.464 395.780,44.600 396.000 C 44.736 396.220,45.287 396.400,45.824 396.400 C 46.361 396.400,46.800 396.580,46.800 396.800 C 46.800 397.020,47.329 397.200,47.976 397.200 C 48.623 397.200,49.264 397.380,49.400 397.600 C 49.536 397.820,50.177 398.000,50.824 398.000 C 51.471 398.000,52.000 398.180,52.000 398.400 C 52.000 398.620,52.705 398.800,53.567 398.800 C 54.428 398.800,55.193 398.970,55.267 399.178 C 55.397 399.548,60.714 399.898,60.904 399.548 C 60.957 399.450,85.715 374.616,115.922 344.361 L 170.844 289.352 169.165 286.176 C 168.241 284.429,166.521 281.415,165.343 279.477 C 164.164 277.539,163.200 275.784,163.200 275.577 C 163.200 275.370,163.042 275.200,162.849 275.200 C 162.655 275.200,162.273 274.660,162.000 274.000 C 161.727 273.340,161.345 272.800,161.151 272.800 C 160.958 272.800,160.800 272.564,160.800 272.275 C 160.800 271.987,160.485 271.402,160.100 270.975 C 159.715 270.549,159.145 269.705,158.832 269.100 C 158.520 268.495,158.115 268.000,157.932 268.000 C 157.750 268.000,157.600 267.730,157.600 267.400 C 157.600 267.070,157.450 266.800,157.268 266.800 C 157.085 266.800,156.680 266.305,156.368 265.700 C 156.056 265.095,155.701 264.510,155.580 264.400 C 155.458 264.290,154.576 263.075,153.621 261.700 C 152.666 260.325,151.774 259.200,151.640 259.200 C 151.506 259.200,123.075 287.523,88.461 322.141 \"\n          stroke=\"none\"\n          fill=\"#e4f2c3\"\n          fill-rule=\"evenodd\"\n        ></path>\n        <path\n          d=\"M192.300 42.682 C 192.795 42.778,193.605 42.778,194.100 42.682 C 194.595 42.587,194.190 42.509,193.200 42.509 C 192.210 42.509,191.805 42.587,192.300 42.682 M205.505 42.683 C 206.002 42.779,206.722 42.775,207.105 42.675 C 207.487 42.575,207.080 42.496,206.200 42.501 C 205.320 42.505,205.007 42.587,205.505 42.683 M187.900 43.082 C 188.395 43.178,189.205 43.178,189.700 43.082 C 190.195 42.987,189.790 42.909,188.800 42.909 C 187.810 42.909,187.405 42.987,187.900 43.082 M209.500 43.082 C 209.995 43.178,210.805 43.178,211.300 43.082 C 211.795 42.987,211.390 42.909,210.400 42.909 C 209.410 42.909,209.005 42.987,209.500 43.082 M253.000 57.007 C 253.440 57.366,254.160 57.835,254.600 58.051 L 255.400 58.444 254.600 57.793 C 254.160 57.434,253.440 56.965,253.000 56.749 L 252.200 56.356 253.000 57.007 M261.600 62.525 C 261.600 62.624,262.261 63.209,263.068 63.825 C 263.876 64.441,264.411 64.741,264.256 64.491 C 263.940 63.979,261.600 62.247,261.600 62.525 M266.800 66.525 C 266.800 66.594,267.385 67.179,268.100 67.825 L 269.400 69.000 268.225 67.700 C 267.130 66.488,266.800 66.216,266.800 66.525 M271.400 70.800 C 272.483 71.900,273.460 72.800,273.570 72.800 C 273.680 72.800,272.883 71.900,271.800 70.800 C 270.717 69.700,269.740 68.800,269.630 68.800 C 269.520 68.800,270.317 69.700,271.400 70.800 M126.981 71.300 L 125.400 73.000 127.100 71.419 C 128.681 69.948,128.984 69.600,128.681 69.600 C 128.616 69.600,127.851 70.365,126.981 71.300 M122.786 75.500 L 120.600 77.800 122.900 75.614 C 125.037 73.582,125.383 73.200,125.086 73.200 C 125.024 73.200,123.989 74.235,122.786 75.500 M277.810 77.300 C 279.548 79.225,281.039 80.800,281.124 80.800 C 281.385 80.800,277.359 76.276,275.962 75.000 C 275.240 74.340,276.072 75.375,277.810 77.300 M282.555 82.919 C 283.403 83.953,284.180 84.800,284.282 84.800 C 284.555 84.800,282.021 81.660,281.477 81.324 C 281.222 81.166,281.707 81.884,282.555 82.919 M287.066 89.181 C 288.529 91.395,289.803 93.130,289.896 93.037 C 290.101 92.833,285.391 85.765,284.812 85.407 C 284.588 85.269,285.602 86.967,287.066 89.181 M110.953 90.500 C 109.576 92.836,109.486 93.035,110.187 92.200 C 111.000 91.232,111.700 90.000,111.438 90.000 C 111.333 90.000,111.115 90.225,110.953 90.500 M290.360 94.200 C 291.034 95.505,291.588 96.228,291.585 95.800 C 291.583 95.580,291.214 94.950,290.764 94.400 C 290.221 93.736,290.085 93.669,290.360 94.200 M293.396 99.881 C 294.374 101.817,295.685 104.570,296.309 106.000 C 296.933 107.430,297.660 109.050,297.924 109.600 L 298.404 110.600 298.147 109.600 C 297.640 107.627,292.565 96.949,291.956 96.573 C 291.769 96.457,292.417 97.946,293.396 99.881 M174.981 102.505 C 174.875 102.782,174.838 108.317,174.900 114.805 L 175.013 126.600 175.106 114.482 L 175.200 102.364 182.162 102.482 C 185.992 102.547,189.041 102.465,188.939 102.300 C 188.595 101.745,175.197 101.942,174.981 102.505 M300.012 116.000 C 300.012 116.330,300.187 116.870,300.400 117.200 C 300.745 117.733,300.788 117.733,300.788 117.200 C 300.788 116.870,300.613 116.330,300.400 116.000 C 300.055 115.467,300.012 115.467,300.012 116.000 M300.856 118.400 C 300.856 118.730,301.011 119.360,301.200 119.800 C 301.417 120.304,301.544 120.378,301.544 120.000 C 301.544 119.670,301.389 119.040,301.200 118.600 C 300.983 118.096,300.856 118.022,300.856 118.400 M301.668 121.200 C 301.688 122.239,302.318 123.946,302.332 123.000 C 302.338 122.560,302.189 121.840,302.000 121.400 C 301.789 120.910,301.661 120.832,301.668 121.200 M97.029 122.229 C 96.881 122.815,96.838 123.372,96.932 123.466 C 97.027 123.560,97.224 123.158,97.371 122.571 C 97.519 121.985,97.562 121.428,97.468 121.334 C 97.373 121.240,97.176 121.642,97.029 122.229 M302.446 124.800 C 302.465 125.130,302.624 125.850,302.800 126.400 L 303.120 127.400 303.154 126.400 C 303.173 125.850,303.013 125.130,302.800 124.800 C 302.455 124.267,302.416 124.267,302.446 124.800 M96.249 125.415 C 96.112 125.773,96.015 126.366,96.034 126.733 C 96.053 127.100,96.227 126.869,96.421 126.220 C 96.798 124.958,96.665 124.333,96.249 125.415 M245.200 151.280 C 245.090 164.854,245.136 175.824,245.303 175.657 C 245.470 175.490,245.560 164.384,245.503 150.977 L 245.400 126.600 245.200 151.280 M259.390 158.400 C 259.390 175.670,259.440 182.735,259.500 174.100 C 259.560 165.465,259.560 151.335,259.500 142.700 C 259.440 134.065,259.390 141.130,259.390 158.400 M303.280 128.800 C 303.280 129.350,303.424 130.250,303.600 130.800 L 303.920 131.800 303.920 130.800 C 303.920 130.250,303.776 129.350,303.600 128.800 L 303.280 127.800 303.280 128.800 M304.070 134.000 C 304.064 134.550,304.203 135.810,304.380 136.800 L 304.700 138.600 304.710 136.800 C 304.716 135.810,304.576 134.550,304.400 134.000 L 304.080 133.000 304.070 134.000 M94.501 136.600 C 94.505 137.480,94.587 137.793,94.683 137.295 C 94.779 136.798,94.775 136.078,94.675 135.695 C 94.575 135.313,94.496 135.720,94.501 136.600 M138.951 137.700 C 137.770 139.048,137.080 140.000,137.284 140.000 C 137.384 140.000,138.045 139.280,138.752 138.400 C 140.125 136.692,140.264 136.201,138.951 137.700 M136.553 140.900 C 135.176 143.236,135.086 143.435,135.787 142.600 C 136.600 141.632,137.300 140.400,137.038 140.400 C 136.933 140.400,136.715 140.625,136.553 140.900 M304.912 148.000 C 304.914 155.119,304.928 155.253,305.291 151.514 C 305.527 149.076,305.527 146.318,305.289 144.114 C 304.938 140.858,304.911 141.142,304.912 148.000 M94.134 144.000 C 94.134 145.650,94.205 146.325,94.291 145.500 C 94.378 144.675,94.378 143.325,94.291 142.500 C 94.205 141.675,94.134 142.350,94.134 144.000 M174.984 158.400 C 174.984 167.970,175.036 171.885,175.100 167.100 C 175.163 162.315,175.163 154.485,175.100 149.700 C 175.036 144.915,174.984 148.830,174.984 158.400 M154.889 144.300 C 153.606 145.565,153.377 145.861,154.378 144.959 C 155.380 144.056,156.645 143.021,157.189 142.659 C 157.733 142.296,157.963 142.000,157.700 142.000 C 157.437 142.000,156.172 143.035,154.889 144.300 M188.988 166.600 C 188.988 179.580,189.038 184.832,189.100 178.271 C 189.162 171.711,189.161 161.091,189.100 154.671 C 189.038 148.252,188.987 153.620,188.988 166.600 M151.381 148.437 C 151.029 149.118,150.812 149.745,150.899 149.832 C 150.986 149.919,151.356 149.362,151.722 148.595 C 152.544 146.870,152.259 146.738,151.381 148.437 M94.134 151.600 C 94.134 153.250,94.205 153.925,94.291 153.100 C 94.378 152.275,94.378 150.925,94.291 150.100 C 94.205 149.275,94.134 149.950,94.134 151.600 M132.256 150.884 C 132.121 151.388,132.030 152.340,132.053 153.000 C 132.081 153.828,132.197 153.584,132.426 152.213 C 132.776 150.123,132.674 149.326,132.256 150.884 M148.656 157.700 C 148.526 158.635,148.562 160.030,148.735 160.800 C 148.983 161.902,149.052 161.540,149.058 159.100 C 149.068 155.566,148.989 155.292,148.656 157.700 M202.937 159.400 C 202.939 161.160,203.009 161.830,203.093 160.889 C 203.178 159.949,203.177 158.509,203.091 157.689 C 203.005 156.870,202.936 157.640,202.937 159.400 M304.463 158.200 C 304.423 158.860,304.304 160.120,304.197 161.000 L 304.003 162.600 304.423 161.260 C 304.654 160.523,304.774 159.263,304.689 158.460 C 304.552 157.166,304.526 157.137,304.463 158.200 M94.440 159.033 C 94.462 159.895,94.627 161.050,94.807 161.600 C 95.011 162.221,95.051 161.691,94.912 160.200 C 94.654 157.421,94.382 156.749,94.440 159.033 M132.028 162.633 C 132.044 163.275,132.216 164.160,132.410 164.600 C 132.647 165.134,132.686 164.802,132.527 163.600 C 132.246 161.480,131.988 160.980,132.028 162.633 M95.228 164.833 C 95.244 165.365,95.419 166.160,95.619 166.600 C 95.871 167.158,95.907 166.915,95.738 165.800 C 95.455 163.943,95.187 163.436,95.228 164.833 M303.422 165.822 C 303.272 166.625,303.238 167.372,303.348 167.482 C 303.458 167.592,303.672 167.025,303.822 166.222 C 303.973 165.419,304.006 164.673,303.896 164.563 C 303.786 164.453,303.573 165.019,303.422 165.822 M202.931 167.800 C 202.933 169.340,203.005 169.921,203.092 169.091 C 203.179 168.261,203.177 167.001,203.089 166.291 C 203.000 165.581,202.929 166.260,202.931 167.800 M151.400 168.800 C 151.741 169.460,152.111 170.000,152.221 170.000 C 152.331 170.000,152.141 169.460,151.800 168.800 C 151.459 168.140,151.089 167.600,150.979 167.600 C 150.869 167.600,151.059 168.140,151.400 168.800 M96.006 169.433 C 96.009 169.855,96.195 170.470,96.418 170.800 C 96.715 171.238,96.752 171.076,96.556 170.200 C 96.227 168.729,95.998 168.410,96.006 169.433 M302.600 170.000 C 302.448 170.691,302.414 171.347,302.524 171.457 C 302.634 171.567,302.848 171.091,303.000 170.400 C 303.152 169.709,303.186 169.053,303.076 168.943 C 302.966 168.833,302.752 169.309,302.600 170.000 M217.201 169.440 C 217.200 170.001,219.377 173.022,220.074 173.425 C 220.363 173.592,220.214 173.295,219.742 172.765 C 219.270 172.234,218.506 171.170,218.043 170.400 C 217.581 169.630,217.202 169.198,217.201 169.440 M153.800 172.000 C 154.659 172.880,155.452 173.600,155.562 173.600 C 155.672 173.600,155.059 172.880,154.200 172.000 C 153.341 171.120,152.548 170.400,152.438 170.400 C 152.328 170.400,152.941 171.120,153.800 172.000 M301.800 173.600 C 301.648 174.291,301.607 174.941,301.709 175.042 C 301.811 175.144,302.009 174.653,302.150 173.950 C 302.483 172.283,302.160 171.960,301.800 173.600 M301.000 176.400 C 300.850 176.873,300.817 177.350,300.927 177.460 C 301.037 177.570,301.250 177.273,301.400 176.800 C 301.550 176.327,301.583 175.850,301.473 175.740 C 301.363 175.630,301.150 175.927,301.000 176.400 M139.150 179.941 C 140.044 181.008,141.092 182.133,141.480 182.441 C 141.868 182.748,141.216 181.875,140.032 180.500 C 138.849 179.125,137.800 178.000,137.703 178.000 C 137.605 178.000,138.257 178.873,139.150 179.941 M300.200 179.200 C 300.050 179.673,300.017 180.150,300.127 180.260 C 300.237 180.370,300.450 180.073,300.600 179.600 C 300.750 179.127,300.783 178.650,300.673 178.540 C 300.563 178.430,300.350 178.727,300.200 179.200 M205.438 179.924 C 205.857 180.652,206.630 181.642,207.156 182.124 C 207.719 182.640,207.495 182.178,206.612 181.000 C 204.723 178.483,204.479 178.259,205.438 179.924 M298.848 183.236 C 297.454 187.166,297.431 187.725,298.800 184.448 C 299.477 182.825,299.970 181.311,299.895 181.085 C 299.819 180.858,299.348 181.826,298.848 183.236 M208.000 183.306 C 208.000 183.394,208.765 184.074,209.700 184.817 C 210.635 185.560,211.146 185.852,210.836 185.465 C 210.251 184.737,208.000 183.023,208.000 183.306 M212.400 186.764 C 212.950 187.214,213.580 187.583,213.800 187.585 C 214.228 187.588,213.505 187.034,212.200 186.360 C 211.669 186.085,211.736 186.221,212.400 186.764 M101.628 187.292 C 101.582 187.765,102.886 190.848,103.058 190.675 C 103.145 190.588,102.866 189.725,102.437 188.758 C 102.008 187.791,101.644 187.131,101.628 187.292 M296.800 188.601 C 296.242 190.067,294.863 193.075,293.544 195.700 C 292.908 196.965,292.484 198.000,292.601 198.000 C 292.847 198.000,295.915 191.813,296.916 189.300 C 297.289 188.365,297.501 187.600,297.387 187.600 C 297.273 187.600,297.009 188.051,296.800 188.601 M218.800 189.582 C 219.130 189.805,219.745 189.991,220.167 189.994 C 221.190 190.002,220.871 189.773,219.400 189.444 C 218.524 189.248,218.362 189.285,218.800 189.582 M291.453 199.700 L 290.733 201.000 291.558 200.000 C 292.289 199.113,292.614 198.400,292.286 198.400 C 292.224 198.400,291.849 198.985,291.453 199.700 M289.786 202.500 L 289.152 203.800 289.967 202.800 C 290.752 201.837,291.008 201.200,290.610 201.200 C 290.506 201.200,290.135 201.785,289.786 202.500 M287.437 206.200 C 287.076 206.750,286.937 207.200,287.127 207.200 C 287.316 207.200,287.677 206.750,287.927 206.200 C 288.178 205.650,288.317 205.200,288.237 205.200 C 288.157 205.200,287.797 205.650,287.437 206.200 M281.882 213.700 C 280.229 215.735,276.698 220.075,274.034 223.344 C 271.371 226.614,269.089 229.494,268.962 229.744 C 268.635 230.392,270.774 228.069,272.200 226.229 C 274.801 222.872,278.622 218.149,279.504 217.200 C 280.811 215.793,285.289 210.000,285.069 210.000 C 284.969 210.000,283.535 211.665,281.882 213.700 M266.018 233.500 C 264.668 235.205,263.347 236.874,263.082 237.208 C 261.310 239.444,260.405 240.800,260.683 240.800 C 260.862 240.800,261.250 240.412,261.547 239.937 C 261.843 239.462,263.446 237.347,265.109 235.237 C 269.074 230.205,268.930 230.400,268.685 230.400 C 268.568 230.400,267.367 231.795,266.018 233.500 M258.189 243.700 C 257.128 245.075,256.089 246.425,255.881 246.700 C 255.672 246.975,255.659 247.197,255.851 247.193 C 256.043 247.189,256.777 246.334,257.483 245.293 C 258.189 244.252,259.149 242.905,259.616 242.300 C 260.084 241.695,260.388 241.200,260.292 241.200 C 260.196 241.200,259.250 242.325,258.189 243.700 M253.921 249.300 C 252.240 251.377,249.893 254.800,250.149 254.800 C 250.252 254.800,251.295 253.498,252.468 251.906 C 253.641 250.315,254.835 248.695,255.123 248.306 C 256.167 246.895,255.261 247.644,253.921 249.300 M248.089 257.300 C 244.402 262.341,242.217 265.600,242.523 265.600 C 242.617 265.600,243.194 264.845,243.805 263.921 C 244.416 262.998,245.079 262.053,245.280 261.821 C 246.090 260.884,249.976 255.200,249.807 255.200 C 249.707 255.200,248.934 256.145,248.089 257.300 M153.600 261.200 C 154.496 262.520,155.320 263.600,155.430 263.600 C 155.540 263.600,154.896 262.520,154.000 261.200 C 153.104 259.880,152.280 258.800,152.170 258.800 C 152.060 258.800,152.704 259.880,153.600 261.200 M162.422 274.200 C 162.427 274.729,163.542 276.191,163.769 275.965 C 163.866 275.868,163.602 275.341,163.182 274.794 C 162.761 274.247,162.420 273.980,162.422 274.200 M167.800 283.200 C 168.141 283.860,168.511 284.400,168.621 284.400 C 168.731 284.400,168.541 283.860,168.200 283.200 C 167.859 282.540,167.489 282.000,167.379 282.000 C 167.269 282.000,167.459 282.540,167.800 283.200 M170.278 287.795 C 170.644 288.562,171.014 289.119,171.101 289.032 C 171.284 288.849,170.070 286.400,169.796 286.400 C 169.695 286.400,169.912 287.028,170.278 287.795 \"\n          stroke=\"none\"\n          fill=\"#e78779\"\n          fill-rule=\"evenodd\"\n        ></path>\n        <path\n          d=\"M192.600 42.800 C 191.250 42.949,194.313 43.069,199.600 43.074 C 205.558 43.079,208.121 42.973,206.600 42.785 C 203.702 42.425,195.912 42.434,192.600 42.800 M184.600 43.600 C 183.060 43.876,183.087 43.889,185.300 43.943 C 186.605 43.975,187.600 43.827,187.600 43.600 C 187.600 43.164,187.036 43.164,184.600 43.600 M211.789 43.582 C 211.931 43.812,212.967 44.000,214.090 44.000 C 216.620 44.000,216.464 43.793,213.665 43.436 C 212.218 43.251,211.613 43.298,211.789 43.582 M180.000 44.400 C 179.102 44.688,179.150 44.724,180.476 44.760 C 181.288 44.782,182.064 44.620,182.200 44.400 C 182.486 43.937,181.445 43.937,180.000 44.400 M217.000 44.400 C 217.136 44.620,218.002 44.779,218.924 44.753 C 220.507 44.708,220.533 44.688,219.400 44.400 C 217.625 43.948,216.721 43.948,217.000 44.400 M176.200 45.200 C 175.486 45.507,175.515 45.547,176.476 45.572 C 177.068 45.587,177.664 45.420,177.800 45.200 C 178.095 44.722,177.311 44.722,176.200 45.200 M221.400 45.200 C 221.536 45.420,222.222 45.582,222.924 45.560 C 224.143 45.522,224.155 45.506,223.200 45.200 C 221.764 44.740,221.116 44.740,221.400 45.200 M172.800 46.000 C 171.845 46.306,171.857 46.322,173.076 46.360 C 173.778 46.382,174.464 46.220,174.600 46.000 C 174.884 45.540,174.236 45.540,172.800 46.000 M224.800 45.992 C 224.800 46.217,225.370 46.400,226.067 46.400 C 227.523 46.400,227.470 46.225,225.900 45.849 C 225.247 45.692,224.800 45.750,224.800 45.992 M169.800 46.800 C 169.086 47.107,169.115 47.147,170.076 47.172 C 170.668 47.187,171.264 47.020,171.400 46.800 C 171.695 46.322,170.911 46.322,169.800 46.800 M227.800 46.800 C 227.936 47.020,228.532 47.187,229.124 47.172 C 230.085 47.147,230.114 47.107,229.400 46.800 C 228.289 46.322,227.505 46.322,227.800 46.800 M164.000 48.753 C 161.690 49.585,158.900 50.673,157.800 51.172 C 154.840 52.513,149.599 55.114,148.000 56.036 C 147.230 56.480,146.270 57.028,145.866 57.254 C 145.462 57.480,145.212 57.745,145.310 57.844 C 145.409 57.942,146.729 57.320,148.244 56.461 C 150.822 55.001,154.890 53.015,158.600 51.407 C 159.480 51.025,160.723 50.462,161.361 50.156 C 162.000 49.850,162.845 49.600,163.238 49.600 C 163.631 49.600,164.064 49.420,164.200 49.200 C 164.336 48.980,164.876 48.800,165.400 48.800 C 165.924 48.800,166.464 48.620,166.600 48.400 C 166.736 48.180,167.287 48.000,167.824 48.000 C 168.361 48.000,168.800 47.820,168.800 47.600 C 168.800 47.039,168.689 47.065,164.000 48.753 M230.600 47.600 C 230.736 47.820,231.242 47.987,231.724 47.972 C 232.569 47.945,232.571 47.931,231.800 47.600 C 230.699 47.127,230.308 47.127,230.600 47.600 M232.990 48.384 C 233.132 48.613,233.687 48.800,234.224 48.800 C 234.761 48.800,235.200 48.980,235.200 49.200 C 235.200 49.420,235.562 49.600,236.005 49.600 C 236.448 49.600,237.168 49.780,237.605 50.000 C 238.042 50.220,238.758 50.580,239.195 50.800 C 239.632 51.020,240.262 51.200,240.595 51.200 C 240.928 51.200,241.200 51.380,241.200 51.600 C 241.200 51.820,241.442 52.000,241.739 52.000 C 242.395 52.000,250.960 56.212,252.523 57.303 C 253.141 57.734,253.739 57.994,253.853 57.880 C 254.328 57.405,245.161 52.669,238.604 50.002 C 234.399 48.292,232.615 47.777,232.990 48.384 M140.968 60.382 C 130.768 67.194,122.444 75.244,114.318 86.156 C 111.543 89.883,111.004 90.800,111.586 90.800 C 111.814 90.800,112.000 90.564,112.000 90.275 C 112.000 89.987,112.360 89.364,112.800 88.892 C 113.240 88.420,113.600 87.846,113.600 87.617 C 113.600 87.388,113.741 87.200,113.914 87.200 C 114.086 87.200,114.543 86.667,114.928 86.015 C 115.313 85.363,115.849 84.598,116.120 84.315 C 116.390 84.032,117.239 82.991,118.006 82.001 C 120.432 78.872,120.909 78.345,125.164 74.101 C 127.454 71.816,130.694 68.838,132.364 67.483 C 134.034 66.127,135.605 64.834,135.855 64.609 C 137.187 63.413,138.051 62.800,138.405 62.800 C 138.622 62.800,138.800 62.620,138.800 62.400 C 138.800 62.180,139.070 62.000,139.400 62.000 C 139.730 62.000,140.000 61.850,140.000 61.668 C 140.000 61.485,140.495 61.080,141.100 60.768 C 141.705 60.455,142.549 59.885,142.975 59.500 C 143.402 59.115,143.987 58.800,144.275 58.800 C 144.564 58.800,144.800 58.620,144.800 58.400 C 144.800 57.816,144.846 57.793,140.968 60.382 M254.400 58.390 C 254.400 58.615,254.636 58.800,254.925 58.800 C 255.213 58.800,255.836 59.160,256.308 59.600 C 256.780 60.040,257.399 60.394,257.683 60.387 C 258.279 60.373,257.154 59.431,255.500 58.559 C 254.858 58.221,254.400 58.150,254.400 58.390 M258.400 60.580 C 258.400 60.977,259.477 62.000,259.896 62.000 C 260.090 62.000,260.598 62.315,261.025 62.700 C 261.452 63.085,262.431 63.875,263.200 64.455 C 263.970 65.035,264.989 65.845,265.464 66.255 C 265.939 66.665,267.099 67.630,268.042 68.400 C 268.985 69.170,271.717 71.749,274.113 74.132 C 276.509 76.514,278.542 78.392,278.630 78.304 C 279.116 77.817,268.076 67.597,262.670 63.530 C 260.872 62.177,259.175 60.897,258.900 60.686 C 258.625 60.475,258.400 60.427,258.400 60.580 M279.242 79.431 C 283.304 84.293,288.457 91.511,289.927 94.400 C 290.207 94.950,290.807 95.850,291.260 96.400 C 292.592 98.018,290.213 93.924,287.077 89.200 C 284.259 84.957,279.984 79.470,279.087 78.947 C 278.819 78.790,278.889 79.008,279.242 79.431 M108.777 94.466 C 108.509 94.980,107.848 96.165,107.307 97.100 C 106.766 98.035,106.422 98.800,106.543 98.800 C 106.875 98.800,109.660 93.927,109.449 93.716 C 109.348 93.614,109.046 93.952,108.777 94.466 M105.078 101.420 C 103.609 104.414,103.745 104.769,105.246 101.860 C 105.910 100.573,106.386 99.453,106.304 99.371 C 106.223 99.289,105.671 100.211,105.078 101.420 M174.800 101.900 C 174.800 102.065,177.995 102.200,181.900 102.200 L 189.000 102.200 189.209 114.200 L 189.418 126.200 189.509 114.533 C 189.559 108.116,189.491 102.581,189.357 102.233 C 189.098 101.557,174.800 101.231,174.800 101.900 M103.078 105.668 C 101.143 110.029,98.668 117.202,98.987 117.520 C 99.094 117.627,99.250 117.464,99.334 117.157 C 99.753 115.633,100.489 113.313,100.780 112.600 C 102.936 107.326,103.953 104.619,103.824 104.491 C 103.738 104.405,103.402 104.935,103.078 105.668 M298.400 112.049 C 298.400 112.636,299.717 116.016,299.882 115.852 C 300.103 115.630,299.192 112.785,298.718 112.220 C 298.543 112.011,298.400 111.934,298.400 112.049 M300.075 117.200 C 300.186 117.530,300.602 119.018,300.999 120.506 C 301.397 121.994,301.799 123.134,301.894 123.040 C 302.113 122.821,300.527 117.184,300.153 116.850 C 299.999 116.713,299.964 116.870,300.075 117.200 M98.043 119.916 C 97.756 120.952,97.448 122.160,97.358 122.600 L 97.196 123.400 97.555 122.600 C 98.170 121.232,98.939 118.405,98.747 118.214 C 98.647 118.114,98.330 118.880,98.043 119.916 M96.854 124.200 C 96.819 124.640,96.689 125.450,96.567 126.000 C 96.375 126.863,96.407 126.903,96.798 126.290 C 97.047 125.899,97.177 125.089,97.086 124.490 C 96.978 123.779,96.897 123.679,96.854 124.200 M302.028 124.433 C 302.044 124.965,302.219 125.760,302.419 126.200 C 302.671 126.758,302.707 126.515,302.538 125.400 C 302.255 123.543,301.987 123.036,302.028 124.433 M156.137 126.706 C 155.882 126.868,159.122 126.952,163.337 126.892 C 174.998 126.729,176.033 126.556,165.800 126.480 C 160.740 126.443,156.392 126.544,156.137 126.706 M202.986 126.892 C 202.878 127.174,202.839 133.973,202.900 142.002 L 203.010 156.600 203.105 141.700 L 203.200 126.800 210.196 126.800 L 217.193 126.800 217.302 148.000 L 217.411 169.200 217.405 147.900 L 217.400 126.600 210.291 126.491 C 204.810 126.406,203.137 126.499,202.986 126.892 M247.400 126.673 C 253.228 126.961,259.601 126.975,259.601 126.700 C 259.600 126.535,256.315 126.435,252.300 126.477 C 248.285 126.519,246.080 126.608,247.400 126.673 M96.064 127.850 C 96.029 128.317,95.905 129.308,95.789 130.050 C 95.596 131.286,95.615 131.317,96.008 130.414 C 96.245 129.872,96.368 128.882,96.283 128.214 C 96.191 127.497,96.102 127.348,96.064 127.850 M302.828 128.433 C 302.844 129.185,303.012 130.160,303.203 130.600 C 303.426 131.115,303.467 130.687,303.318 129.400 C 303.044 127.022,302.789 126.519,302.828 128.433 M146.140 130.906 C 143.004 133.017,142.026 133.780,142.013 134.127 C 142.006 134.307,142.765 133.842,143.700 133.094 C 144.635 132.346,146.075 131.329,146.900 130.834 C 148.240 130.031,148.708 129.600,148.240 129.600 C 148.152 129.600,147.207 130.188,146.140 130.906 M95.077 134.150 C 94.907 135.663,94.851 136.985,94.954 137.087 C 95.243 137.376,95.685 133.895,95.527 132.576 C 95.440 131.853,95.267 132.458,95.077 134.150 M303.714 133.400 C 303.717 134.500,303.795 134.903,303.887 134.295 C 303.979 133.686,303.977 132.786,303.882 132.295 C 303.787 131.803,303.711 132.300,303.714 133.400 M139.183 136.900 C 138.440 137.835,138.148 138.346,138.535 138.036 C 139.263 137.451,140.977 135.200,140.694 135.200 C 140.606 135.200,139.926 135.965,139.183 136.900 M94.347 143.100 C 94.266 145.905,94.301 150.360,94.425 153.000 C 94.600 156.729,94.667 155.591,94.725 147.900 C 94.805 137.354,94.592 134.643,94.347 143.100 M304.573 147.800 C 304.573 153.080,304.630 155.185,304.699 152.477 C 304.768 149.769,304.768 145.449,304.699 142.877 C 304.629 140.305,304.572 142.520,304.573 147.800 M136.998 139.602 C 136.598 140.044,136.366 140.499,136.482 140.615 C 136.597 140.730,136.990 140.369,137.355 139.812 C 138.152 138.596,137.993 138.502,136.998 139.602 M160.400 141.200 C 160.001 141.458,162.310 141.590,167.300 141.594 C 172.037 141.598,174.800 141.453,174.800 141.200 C 174.800 140.675,161.213 140.675,160.400 141.200 M134.814 143.173 C 134.184 144.351,133.513 146.220,133.837 145.896 C 134.220 145.514,135.607 142.400,135.395 142.400 C 135.303 142.400,135.042 142.748,134.814 143.173 M154.328 145.100 C 152.690 146.790,150.849 149.600,151.379 149.600 C 151.489 149.600,151.873 149.032,152.233 148.337 C 152.592 147.643,153.701 146.203,154.698 145.137 C 157.033 142.641,156.741 142.611,154.328 145.100 M132.273 149.353 C 132.123 149.745,132.011 150.366,132.025 150.733 C 132.042 151.175,132.181 151.074,132.437 150.434 C 132.649 149.903,132.761 149.282,132.685 149.054 C 132.609 148.827,132.424 148.961,132.273 149.353 M131.751 157.600 C 131.751 160.130,131.816 161.165,131.896 159.900 C 131.975 158.635,131.975 156.565,131.896 155.300 C 131.816 154.035,131.751 155.070,131.751 157.600 M149.301 156.200 C 149.305 157.080,149.387 157.393,149.483 156.895 C 149.579 156.398,149.575 155.678,149.475 155.295 C 149.375 154.913,149.296 155.320,149.301 156.200 M95.085 161.200 C 95.207 162.630,95.372 163.875,95.453 163.967 C 95.720 164.270,95.511 161.022,95.185 159.800 C 94.982 159.044,94.946 159.562,95.085 161.200 M149.293 162.000 C 149.293 162.770,149.375 163.085,149.476 162.700 C 149.576 162.315,149.576 161.685,149.476 161.300 C 149.375 160.915,149.293 161.230,149.293 162.000 M303.709 162.800 C 303.709 163.790,303.787 164.195,303.882 163.700 C 303.978 163.205,303.978 162.395,303.882 161.900 C 303.787 161.405,303.709 161.810,303.709 162.800 M202.901 163.800 C 202.905 164.680,202.987 164.993,203.083 164.495 C 203.179 163.998,203.175 163.278,203.075 162.895 C 202.975 162.513,202.896 162.920,202.901 163.800 M132.068 164.400 C 132.088 165.439,132.718 167.146,132.732 166.200 C 132.738 165.760,132.589 165.040,132.400 164.600 C 132.189 164.110,132.061 164.032,132.068 164.400 M96.093 167.600 C 96.093 168.370,96.175 168.685,96.276 168.300 C 96.376 167.915,96.376 167.285,96.276 166.900 C 96.175 166.515,96.093 166.830,96.093 167.600 M132.856 168.000 C 132.856 168.330,133.011 168.960,133.200 169.400 C 133.417 169.904,133.544 169.978,133.544 169.600 C 133.544 169.270,133.389 168.640,133.200 168.200 C 132.983 167.696,132.856 167.622,132.856 168.000 M96.662 170.600 C 96.796 171.480,96.972 172.275,97.053 172.367 C 97.356 172.710,97.129 170.568,96.781 169.800 C 96.529 169.242,96.493 169.485,96.662 170.600 M152.338 169.869 C 152.813 170.740,155.939 173.824,156.093 173.574 C 156.152 173.478,155.241 172.441,154.070 171.269 C 152.898 170.097,152.118 169.467,152.338 169.869 M133.628 170.492 C 133.582 170.965,134.886 174.048,135.058 173.875 C 135.145 173.788,134.866 172.925,134.437 171.958 C 134.008 170.991,133.644 170.331,133.628 170.492 M202.853 172.800 C 202.830 174.230,202.956 175.627,203.132 175.904 C 203.308 176.180,203.385 175.280,203.303 173.904 C 203.087 170.275,202.899 169.814,202.853 172.800 M218.800 171.725 C 218.800 171.794,219.385 172.379,220.100 173.025 L 221.400 174.200 220.225 172.900 C 219.130 171.688,218.800 171.416,218.800 171.725 M97.458 174.000 C 97.775 175.725,98.002 176.051,97.994 174.767 C 97.991 174.235,97.811 173.530,97.594 173.200 C 97.318 172.778,97.277 173.015,97.458 174.000 M164.500 175.898 C 166.425 175.971,169.575 175.971,171.500 175.898 C 173.425 175.825,171.850 175.765,168.000 175.765 C 164.150 175.765,162.575 175.825,164.500 175.898 M229.276 175.899 C 232.068 175.967,236.748 175.968,239.676 175.899 C 242.604 175.831,240.320 175.775,234.600 175.774 C 228.880 175.774,226.484 175.830,229.276 175.899 M203.600 176.953 C 203.600 177.382,204.790 179.600,205.021 179.600 C 205.131 179.600,204.923 179.015,204.559 178.300 C 203.817 176.840,203.600 176.536,203.600 176.953 M206.834 182.247 C 207.365 182.933,207.880 183.423,207.979 183.335 C 208.077 183.247,207.643 182.686,207.013 182.088 L 205.869 181.000 206.834 182.247 M144.000 184.820 C 145.387 185.761,146.178 186.035,145.200 185.236 C 144.650 184.786,144.020 184.417,143.800 184.415 C 143.580 184.413,143.670 184.596,144.000 184.820 M239.800 190.000 L 220.200 190.211 239.676 190.306 C 252.332 190.367,259.239 190.260,259.400 190.000 C 259.536 189.780,259.592 189.642,259.524 189.694 C 259.456 189.746,250.580 189.884,239.800 190.000 M164.873 190.299 C 169.204 190.364,176.404 190.364,180.873 190.300 C 185.343 190.235,181.800 190.182,173.000 190.182 C 164.200 190.182,160.543 190.235,164.873 190.299 M288.953 203.300 C 287.576 205.636,287.486 205.835,288.187 205.000 C 289.000 204.032,289.700 202.800,289.438 202.800 C 289.333 202.800,289.115 203.025,288.953 203.300 M284.399 210.100 C 283.810 210.904,283.713 211.184,284.145 210.833 C 284.801 210.300,285.793 208.800,285.489 208.800 C 285.413 208.800,284.922 209.385,284.399 210.100 \"\n          stroke=\"none\"\n          fill=\"#f96c6c\"\n          fill-rule=\"evenodd\"\n        ></path>\n        <path\n          d=\"M107.440 199.202 C 108.039 200.303,108.593 201.140,108.671 201.063 C 108.843 200.890,106.808 197.200,106.541 197.200 C 106.436 197.200,106.840 198.101,107.440 199.202 M109.013 202.000 C 109.832 203.484,114.816 210.763,115.159 210.975 C 115.558 211.221,109.782 202.501,109.082 201.800 C 108.816 201.534,108.793 201.601,109.013 202.000 M116.267 212.560 C 116.670 213.089,119.231 216.236,121.957 219.555 C 124.683 222.874,128.879 228.112,131.280 231.195 C 133.681 234.278,135.747 236.800,135.871 236.800 C 136.150 236.800,136.613 237.405,129.000 227.800 C 121.982 218.946,115.950 211.600,115.697 211.600 C 115.607 211.600,115.863 212.032,116.267 212.560 M138.225 240.100 C 139.475 241.805,140.574 243.200,140.668 243.200 C 140.939 243.200,138.589 239.938,137.209 238.400 C 136.519 237.630,136.976 238.395,138.225 240.100 M141.200 243.813 C 141.200 244.186,147.991 253.200,148.272 253.200 C 148.396 253.200,148.324 252.975,148.112 252.700 C 147.900 252.425,146.258 250.252,144.463 247.870 C 142.668 245.489,141.200 243.663,141.200 243.813 M149.999 255.952 C 150.960 257.322,151.927 258.555,152.147 258.691 C 152.368 258.827,151.762 257.818,150.801 256.448 C 149.840 255.078,148.873 253.845,148.653 253.709 C 148.432 253.573,149.038 254.582,149.999 255.952 M239.685 269.100 C 237.802 271.901,237.505 272.400,237.718 272.400 C 237.808 272.400,238.720 271.140,239.745 269.600 C 240.769 268.060,241.522 266.800,241.418 266.800 C 241.315 266.800,240.534 267.835,239.685 269.100 M235.000 276.400 C 234.659 277.060,234.469 277.600,234.579 277.600 C 234.689 277.600,235.059 277.060,235.400 276.400 C 235.741 275.740,235.931 275.200,235.821 275.200 C 235.711 275.200,235.341 275.740,235.000 276.400 M232.708 280.100 C 232.387 280.595,231.907 281.450,231.640 282.000 C 230.960 283.403,232.194 281.906,233.041 280.300 C 233.739 278.974,233.523 278.844,232.708 280.100 M229.360 286.077 C 228.997 286.780,228.353 287.971,227.930 288.724 C 227.507 289.478,227.228 290.161,227.310 290.243 C 227.392 290.325,228.128 289.134,228.946 287.596 C 229.764 286.058,230.341 284.800,230.227 284.800 C 230.114 284.800,229.723 285.375,229.360 286.077 M171.201 288.920 C 171.199 289.473,172.450 291.684,172.651 291.482 C 172.757 291.377,172.474 290.685,172.023 289.945 C 171.572 289.205,171.202 288.744,171.201 288.920 M172.803 292.300 C 172.806 292.657,174.394 295.108,174.397 294.761 C 174.399 294.630,174.117 293.955,173.771 293.261 C 173.162 292.041,172.797 291.679,172.803 292.300 M224.400 295.600 C 223.515 297.360,222.881 298.800,222.991 298.800 C 223.101 298.800,223.915 297.360,224.800 295.600 C 225.685 293.840,226.319 292.400,226.209 292.400 C 226.099 292.400,225.285 293.840,224.400 295.600 M174.512 295.500 C 174.985 296.395,179.235 305.280,179.965 306.900 C 180.831 308.825,181.467 309.554,180.837 307.900 C 180.178 306.170,174.749 295.200,174.552 295.200 C 174.442 295.200,174.424 295.335,174.512 295.500 M221.478 301.420 C 220.009 304.414,220.145 304.769,221.646 301.860 C 222.310 300.573,222.786 299.453,222.704 299.371 C 222.623 299.289,222.071 300.211,221.478 301.420 M217.444 310.044 C 216.055 313.249,216.327 313.521,217.778 310.378 C 218.392 309.048,218.808 307.875,218.704 307.770 C 218.599 307.666,218.032 308.689,217.444 310.044 M181.218 309.251 C 181.180 309.780,182.457 312.476,182.652 312.281 C 182.765 312.168,182.493 311.384,182.047 310.538 C 181.600 309.692,181.227 309.113,181.218 309.251 M215.585 314.239 C 215.172 315.327,214.958 315.831,213.481 319.200 C 213.144 319.970,212.206 322.310,211.397 324.400 C 210.589 326.490,209.780 328.560,209.601 329.000 C 208.535 331.613,207.993 333.326,208.174 333.507 C 208.288 333.621,208.491 333.374,208.626 332.957 C 208.760 332.541,209.215 331.321,209.635 330.247 C 210.056 329.172,210.400 328.135,210.400 327.942 C 210.400 327.749,210.736 326.828,211.146 325.896 C 213.722 320.037,216.371 313.438,216.211 313.278 C 216.107 313.174,215.826 313.606,215.585 314.239 M189.451 329.174 C 189.827 330.639,190.771 332.686,190.755 332.000 C 190.747 331.670,190.394 330.680,189.971 329.800 C 189.548 328.920,189.314 328.638,189.451 329.174 M190.828 333.076 C 190.918 334.115,191.544 334.996,191.572 334.124 C 191.587 333.642,191.420 333.136,191.200 333.000 C 190.980 332.864,190.813 332.898,190.828 333.076 M207.115 336.000 C 206.749 337.210,206.333 338.789,206.191 339.510 C 205.510 342.958,198.479 346.393,197.000 344.000 C 196.864 343.780,196.549 343.600,196.300 343.600 C 196.051 343.600,196.196 343.864,196.624 344.187 C 199.948 346.702,205.815 343.514,206.816 338.650 C 207.093 337.302,207.488 335.984,207.693 335.719 C 207.898 335.455,208.002 334.915,207.924 334.519 C 207.843 334.114,207.490 334.761,207.115 336.000 M192.423 337.987 C 193.284 341.265,193.615 341.946,194.863 343.002 L 195.800 343.794 194.950 342.797 C 193.794 341.441,193.423 340.593,192.798 337.881 C 192.504 336.606,192.135 335.484,191.979 335.387 C 191.822 335.290,192.022 336.460,192.423 337.987 \"\n          stroke=\"none\"\n          fill=\"#c47444\"\n          fill-rule=\"evenodd\"\n        ></path>\n        <path\n          d=\"M105.200 195.721 C 105.200 196.098,106.810 198.937,107.287 199.400 C 107.514 199.620,107.208 198.900,106.607 197.800 C 105.451 195.682,105.200 195.311,105.200 195.721 M110.000 204.152 C 110.000 204.641,111.800 207.190,112.149 207.195 C 112.341 207.198,112.328 206.975,112.121 206.700 C 111.913 206.425,111.351 205.681,110.872 205.046 C 110.392 204.411,110.000 204.009,110.000 204.152 M112.422 207.800 C 112.427 208.329,113.542 209.791,113.769 209.565 C 113.866 209.468,113.602 208.941,113.182 208.394 C 112.761 207.847,112.420 207.580,112.422 207.800 M114.314 210.604 C 114.541 211.047,115.148 211.766,115.663 212.202 C 116.567 212.966,116.565 212.952,115.606 211.797 C 114.013 209.879,113.879 209.755,114.314 210.604 M117.846 215.000 C 120.162 218.012,123.600 222.045,123.600 221.750 C 123.600 221.462,120.044 217.105,117.765 214.600 L 116.309 213.000 117.846 215.000 M124.756 223.400 C 126.149 225.410,126.784 226.150,126.963 225.970 C 127.057 225.876,126.412 224.989,125.530 224.000 C 124.647 223.010,124.299 222.740,124.756 223.400 M127.939 227.400 C 128.381 228.060,129.309 229.230,130.002 230.000 C 131.115 231.236,131.169 231.259,130.461 230.200 C 130.019 229.540,129.091 228.370,128.398 227.600 C 127.285 226.364,127.231 226.341,127.939 227.400 M133.683 234.822 C 134.279 235.580,136.079 237.949,137.683 240.086 C 139.287 242.223,140.731 243.978,140.890 243.986 C 141.245 244.003,133.678 234.092,133.048 233.714 C 132.802 233.565,133.087 234.064,133.683 234.822 M146.234 251.200 C 146.728 252.140,151.643 258.800,151.842 258.800 C 151.941 258.800,151.161 257.579,150.110 256.086 C 148.053 253.162,145.720 250.221,146.234 251.200 M239.028 271.036 C 235.758 275.961,234.793 277.600,235.161 277.600 C 235.373 277.600,235.660 277.241,235.799 276.802 C 235.938 276.364,236.266 275.779,236.526 275.502 C 236.787 275.226,237.550 274.100,238.223 273.000 C 238.896 271.900,239.772 270.505,240.169 269.900 C 240.567 269.295,240.807 268.800,240.703 268.800 C 240.598 268.800,239.845 269.806,239.028 271.036 M233.495 279.819 C 232.904 280.799,232.550 281.599,232.710 281.597 C 233.020 281.593,234.883 278.350,234.688 278.154 C 234.624 278.090,234.087 278.839,233.495 279.819 M231.040 283.998 C 230.440 285.099,230.096 285.996,230.275 285.990 C 230.617 285.980,232.481 282.348,232.259 282.125 C 232.188 282.054,231.639 282.897,231.040 283.998 M171.600 290.450 C 171.600 290.798,172.837 293.200,173.017 293.200 C 173.104 293.200,173.061 292.885,172.921 292.500 C 172.633 291.706,171.600 290.103,171.600 290.450 M173.200 293.739 C 173.200 294.166,174.514 296.419,174.671 296.262 C 174.877 296.056,173.695 293.600,173.390 293.600 C 173.285 293.600,173.200 293.662,173.200 293.739 M221.908 301.716 C 217.730 309.882,214.101 318.400,214.800 318.400 C 215.020 318.400,215.200 318.040,215.200 317.600 C 215.200 317.160,215.380 316.800,215.600 316.800 C 215.820 316.800,216.000 316.528,216.000 316.195 C 216.000 315.862,216.180 315.232,216.400 314.795 C 216.620 314.358,216.980 313.642,217.200 313.205 C 217.420 312.768,217.600 312.138,217.600 311.805 C 217.600 311.472,217.780 311.200,218.000 311.200 C 218.220 311.200,218.400 310.840,218.400 310.400 C 218.400 309.960,218.580 309.600,218.800 309.600 C 219.020 309.600,219.200 309.321,219.200 308.981 C 219.200 308.640,220.013 306.633,221.007 304.521 C 222.702 300.918,223.353 298.892,221.908 301.716 M182.655 313.671 C 183.024 314.622,183.449 315.580,183.598 315.800 C 183.747 316.020,184.287 317.280,184.797 318.600 C 185.307 319.920,185.890 321.180,186.091 321.400 C 186.508 321.855,185.215 318.455,183.769 315.295 C 183.236 314.130,182.800 313.012,182.800 312.812 C 182.800 312.611,182.616 312.334,182.392 312.195 C 182.167 312.056,182.286 312.721,182.655 313.671 M213.095 321.128 C 211.903 323.876,211.792 324.400,212.400 324.400 C 212.620 324.400,212.800 324.045,212.800 323.612 C 212.800 323.179,213.169 322.167,213.620 321.364 C 214.071 320.561,214.384 319.611,214.315 319.254 C 214.246 318.896,213.697 319.740,213.095 321.128 M210.649 327.130 C 210.472 327.642,210.433 328.167,210.563 328.297 C 210.978 328.711,211.270 328.100,211.118 327.134 L 210.971 326.200 210.649 327.130 M209.079 331.357 C 208.915 331.774,208.875 332.209,208.991 332.324 C 209.355 332.689,209.676 332.091,209.524 331.331 C 209.383 330.635,209.362 330.636,209.079 331.357 M208.267 333.467 C 208.120 333.613,208.000 334.117,208.000 334.587 C 208.000 335.056,207.846 335.611,207.657 335.820 C 207.468 336.029,207.088 337.302,206.813 338.650 C 206.270 341.307,205.374 342.619,203.200 343.944 C 201.990 344.681,201.922 344.797,202.700 344.799 C 203.195 344.799,203.600 344.620,203.600 344.400 C 203.600 344.180,203.793 344.000,204.029 344.000 C 205.161 344.000,206.610 341.481,207.636 337.729 C 208.107 336.008,208.583 334.285,208.693 333.900 C 208.900 333.176,208.730 333.003,208.267 333.467 M192.028 338.076 C 192.013 338.668,192.180 339.264,192.400 339.400 C 192.878 339.695,192.878 338.911,192.400 337.800 C 192.093 337.086,192.053 337.115,192.028 338.076 M195.824 344.187 C 196.251 344.510,196.780 344.775,197.000 344.775 C 197.220 344.775,197.051 344.510,196.624 344.187 C 196.196 343.864,195.667 343.600,195.447 343.600 C 195.227 343.600,195.396 343.864,195.824 344.187 M198.000 345.200 C 198.000 345.420,198.709 345.600,199.576 345.600 C 200.443 345.600,201.264 345.420,201.400 345.200 C 201.551 344.956,200.937 344.800,199.824 344.800 C 198.821 344.800,198.000 344.980,198.000 345.200 M379.579 380.222 C 379.051 380.784,378.888 381.141,379.218 381.014 C 379.739 380.815,381.034 379.200,380.673 379.200 C 380.600 379.200,380.107 379.660,379.579 380.222 \"\n          stroke=\"none\"\n          fill=\"#c0b06c\"\n          fill-rule=\"evenodd\"\n        ></path>\n      </g>\n    </svg>\n  )\n}\n\nexport default BaiduMapIcon\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nimport { rhythm, scale } from \"../../utils/typography\"\n\nimport moment from \"moment\"\nimport \"moment/locale/zh-cn\"\nimport Icon from \"../Icon\"\nimport GoogleMapIcon from \"./GoogleMapIcon\"\nimport BaiduMapIcon from \"./BaiduMapIcon\"\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  justify-content: center;\n  align-items: center;\n\n  margin: ${rhythm(1)} 0;\n`\n\nconst Pair = styled.div`\n  width: ${rhythm(15)};\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid #0002;\n  padding-bottom: ${rhythm(0.2)};\n`\n\nconst Name = styled.div`\n  margin-right: ${rhythm(2)};\n  white-space: nowrap;\n  ::after {\n    content: \":\";\n  }\n`\n\nconst Value = styled.div``\n\nconst GPSPair = styled.div`\n  width: ${rhythm(8)};\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n  padding-top: ${rhythm(0.2)};\n  font-size: ${rhythm(0.5)};\n`\n\nconst GPSCol = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    margin: 0 8px;\n    margin-top: 12px;\n  }\n`\n\nconst GPSValue = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`\n\nconst fmtExposureTime = t => {\n  if (t < 1) {\n    return `${(t * 1000).toFixed(2)}ms`\n  }\n  return `${t.toFixed(2)}s`\n}\n\nconst calcAperture = metadata => {\n  let ret = Math.pow(2, metadata.ApertureValue / 2)\n  return ret.toFixed(2)\n}\n\nconst calcMaxAperture = metadata => {\n  let ret = Math.pow(2, metadata.MaxApertureValue / 2)\n  return ret.toFixed(2)\n}\n\nconst makeBaiduMapUrl = gps => {\n  let url = \"http://api.map.baidu.com/marker?location=\"\n  url += gps.latitude.toFixed(6)\n  url += \",\"\n  url += gps.longitude.toFixed(6)\n  url += \"&title=\" + encodeURI(\"拍摄位置\")\n  url += \"&content=\" + encodeURI(\"拍摄位置\")\n  url += \"&output=html&src=tajoy.net\"\n  return url\n}\n\nconst makeGoogleMapUrl = gps => {\n  let url = \"http://maps.google.com/maps?q=loc:\"\n  url += gps.latitude.toFixed(6)\n  url += \",\"\n  url += gps.longitude.toFixed(6)\n  return url\n}\n\nconst ExifList = ({ photo }) => {\n  const {\n    childImageExt: { metadata },\n  } = photo\n  // console.log(\"metadata\", metadata)\n  return (\n    <Container>\n      <Pair>\n        <Name>拍摄时间</Name>\n        <Value>{moment(metadata.CreateDate).format(\"ll LTS\")}</Value>\n      </Pair>\n      {metadata.gps && (\n        <Pair>\n          <Name>拍摄位置</Name>\n          <GPSValue>\n            <GPSCol>\n              <GPSPair>\n                <Name>经度</Name>\n                <Value style={{ width: rhythm(2) }}>\n                  {metadata.gps.longitude.toFixed(3)}\n                </Value>\n              </GPSPair>\n              <GPSPair>\n                <Name>维度</Name>\n                <Value style={{ width: rhythm(2) }}>\n                  {metadata.gps.latitude.toFixed(3)}\n                </Value>\n              </GPSPair>\n            </GPSCol>\n            <GPSCol>\n              <a\n                href={makeBaiduMapUrl(metadata.gps)}\n                target=\"_blank\"\n                title=\"百度地图中显示\"\n              >\n                <BaiduMapIcon />\n              </a>\n            </GPSCol>\n            <GPSCol>\n              <a\n                href={makeGoogleMapUrl(metadata.gps)}\n                target=\"_blank\"\n                title=\"谷歌地图中显示\"\n              >\n                <GoogleMapIcon />\n              </a>\n            </GPSCol>\n          </GPSValue>\n        </Pair>\n      )}\n      <Pair>\n        <Name>摄像机品牌</Name>\n        <Value>{metadata.Make}</Value>\n      </Pair>\n      <Pair>\n        <Name>摄像机型号</Name>\n        <Value>{metadata.Model}</Value>\n      </Pair>\n      <Pair>\n        <Name>镜头型号</Name>\n        <Value>{metadata.LensModel}</Value>\n      </Pair>\n      <Pair>\n        <Name>曝光时长</Name>\n        <Value>{fmtExposureTime(metadata.ExposureTime)}</Value>\n      </Pair>\n      <Pair>\n        <Name>曝光模式</Name>\n        <Value>{metadata.ExposureMode}</Value>\n      </Pair>\n      <Pair>\n        <Name>曝光程序</Name>\n        <Value>{metadata.ExposureProgram}</Value>\n      </Pair>\n      <Pair>\n        <Name>ISO</Name>\n        <Value>{metadata.ISO}</Value>\n      </Pair>\n      <Pair>\n        <Name>光圈</Name>\n        <Value>{calcAperture(metadata)}</Value>\n      </Pair>\n      {metadata.MaxApertureValue && (\n        <Pair>\n          <Name>最大光圈</Name>\n          <Value>{calcMaxAperture(metadata)}</Value>\n        </Pair>\n      )}\n      <Pair>\n        <Name>焦距</Name>\n        <Value>{metadata.FocalLength}</Value>\n      </Pair>\n      <Pair>\n        <Name>35mm等效焦距</Name>\n        <Value>{metadata.FocalLengthIn35mmFormat}</Value>\n      </Pair>\n      <Pair>\n        <Name>后期软件</Name>\n        <Value>{metadata.Software}</Value>\n      </Pair>\n    </Container>\n  )\n}\n\nexport default ExifList\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport transition from \"styled-transition-group\"\n\nimport Axios from \"axios\"\n\nimport { blobToSrc } from \"../../utils/helpers\"\nimport Viewer from \"./Viewer\"\nimport ExifList from \"./ExifList\"\n\nconst axios = Axios.create()\nconst Container = styled.div`\n  width: 100%;\n`\n\nconst Canvas = styled.canvas`\n  margin: 0;\n  padding: 0;\n  width: ${props => `${props.width}px`};\n  height: ${props => `${props.height}px`};\n  filter: ${props => `blur(${props.blur}px)`};\n  transition: filter 500ms ease-in;\n\n  cursor: ${props => (props.blur > 0.1 ? \"unset\" : \"pointer\")};\n`\n\nconst FullViewerWrapper = transition.div`\n\n  margin: 0;\n  padding: 0;\n\n  z-index: 999999;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n\n  display: flex;\n  transition: opacity 1s;\n  justify-content: center;\n  align-items: center;\n  background-color: #000a;\n\n  &:enter {\n    opacity: 0.01;\n  }\n  &:enter-active {\n    opacity: 1;\n    transition: 500ms ease-in;\n  }\n  &:exit {\n    opacity: 1;\n  }\n  &:exit-active {\n    opacity: 0.01;\n    transition: 500ms ease-out;\n  }\n`\n\nconst FullViewer = styled.img`\n  width: auto;\n  height: auto;\n  max-width: 95%;\n  max-height: 95%;\n`\n\nclass PhotoViewer extends React.Component {\n  constructor(props) {\n    super(props)\n    this.containerRef = React.createRef()\n    this.canvasRef = React.createRef()\n    this.state = {\n      width: null,\n      height: null,\n      imageSrc: null,\n      loaded: false,\n      progress: 0.0,\n      blur: 10,\n      showFullViewer: false,\n    }\n  }\n\n  get container() {\n    return this.containerRef.current\n  }\n\n  get canvas() {\n    return this.canvasRef.current\n  }\n\n  loadImage() {\n    const { photo } = this.props\n    const self = this\n    const CancelToken = Axios.CancelToken\n    const source = CancelToken.source()\n    if (this.source) {\n      this.source.cancel(\"取消上次请求\")\n    }\n    this.source = source\n    axios\n      .get(photo.publicURL, {\n        onDownloadProgress: e => {\n          self.onProgress((100 * e.loaded) / e.total)\n        },\n        responseType: \"blob\",\n        cancelToken: source.token,\n      })\n      .then(async resp => {\n        this.source = null\n        // console.log(\"resp\", resp)\n        if (resp.status >= 200 && resp.status < 300) {\n          self.setState({\n            loaded: true,\n          })\n          const src = blobToSrc(resp.data)\n          if (src) {\n            self.setState({\n              imageSrc: src,\n            })\n            if (this.viewer) {\n              const image = new Image()\n              image.src = src\n              image.onload = () => {\n                this.viewer.setPhotoImage(image)\n              }\n            }\n          }\n        }\n      })\n      .catch(e => {\n        if (e.message === \"取消上次请求\") return\n        console.error(e)\n      })\n  }\n\n  onProgress(progress) {\n    this.setState({\n      progress,\n    })\n    if (this.viewer) {\n      this.viewer.setProgress(progress)\n    }\n  }\n\n  update() {\n    const self = this\n    this.loadImage()\n    const { width } = this.containerRef.current.getBoundingClientRect()\n    const { photo } = this.props\n    const { childImageExt } = photo\n    const { metadata, tinyImg, smallImg } = childImageExt\n    const height = (width * metadata.height) / metadata.width\n    // console.log(\"tinyImg\", tinyImg)\n    // console.log(\"size\", { width, height })\n    // const pixels = Uint8Array.from(new Buffer(tinyImg.raw, \"base64\"))\n    // console.log(\"pixels\", pixels)\n    if (this.viewer) {\n      this.viewer.width = width\n      this.viewer.height = height\n      this.viewer.tinyImg = tinyImg\n      this.viewer.smallImg = smallImg\n    } else {\n      this.viewer = new Viewer({\n        canvas: this.canvasRef.current,\n        width,\n        height,\n        tinyImg,\n        smallImg,\n        changeBlur: blur =>\n          self.setState({\n            blur,\n          }),\n      })\n    }\n  }\n\n  componentDidMount() {\n    this.update()\n    const { width } = this.containerRef.current.getBoundingClientRect()\n    const { photo } = this.props\n    const { childImageExt } = photo\n    const { metadata } = childImageExt\n    const height = (width * metadata.height) / metadata.width\n    this.setState({\n      width,\n      height,\n    })\n  }\n  componentDidUpdate() {\n    if (this.lastPhotoId !== this.props.photo.id) {\n      this.update()\n    }\n    this.lastPhotoId = this.props.photo.id\n  }\n\n  toggleFullViewer = () => {\n    const { imageSrc, showFullViewer } = this.state\n    if (!showFullViewer && !imageSrc) {\n      return\n    }\n    this.setState({\n      showFullViewer: !showFullViewer,\n    })\n  }\n\n  render() {\n    const { photo } = this.props\n    const { blur, width, height, showFullViewer, imageSrc } = this.state\n    return (\n      <Container ref={this.containerRef}>\n        <Canvas\n          blur={blur}\n          ref={this.canvasRef}\n          width={width}\n          height={height}\n          onClick={this.toggleFullViewer}\n        />\n        <ExifList photo={photo} />\n        <FullViewerWrapper\n          in={showFullViewer}\n          unmountOnExit\n          timeout={500}\n          onClick={this.toggleFullViewer}\n        >\n          <FullViewer src={imageSrc} />\n        </FullViewerWrapper>\n      </Container>\n    )\n  }\n}\n\nexport default PhotoViewer\n","import React from \"react\"\n\nimport { Link } from \"gatsby\"\n\nimport styled from \"styled-components\"\nimport { rhythm, scale } from \"../utils/typography\"\n\n\nimport moment from \"moment\"\n\nimport Comment from \"./Comment\"\nimport Nav from \"./Nav\"\nimport FeedbackReward from \"./FeedbackReward\"\nimport License from \"./License\"\nimport Icon from \"./Icon\"\nimport PhotoViewer from \"./photo-viewer/PhotoViewer\"\n\nconst Container = styled.div``\n\nconst Title = styled.h1``\n\nconst Description = styled.p``\n\nconst Subtitle = styled.div`\n  margin-bottom: ${rhythm(1)};\n`\nconst Pair = styled.div`\n  white-space: nowrap;\n`\n\nconst SEOKeywords = styled.div`\n  display: none;\n`\n\nconst Photo = ({ photo, context }) => {\n  const {\n    id,\n    fields: { keywords, date, title, description, showComments = true },\n  } = photo\n\n  return (\n    <Container>\n      <Title>{title}</Title>\n      {description && <Description>{description}</Description>}\n      <Subtitle>\n        <Pair>\n          {date && <Icon type=\"r\" id=\"calendar\" />}\n          {date && moment(date).format(\"YYYY-MM-DD\")}\n        </Pair>\n      </Subtitle>\n      <SEOKeywords>\n        {keywords &&\n          keywords.map((k, i) => (\n            <div key={i}>\n              <b>{k}</b>\n              <strong>{k}</strong>\n            </div>\n          ))}\n      </SEOKeywords>\n      <PhotoViewer photo={photo} />\n      <FeedbackReward />\n      <License context={context} />\n      <Nav />\n      <Comment id={id} show={showComments} />\n    </Container>\n  )\n}\n\nexport default Photo\n","import React from \"react\"\nimport Photo from \"../components/Photo\"\nimport { graphql } from \"gatsby\"\n\nconst PhotoTemplate = ({ location, pageContext, data }) => {\n  return (\n    <Photo\n      photo={data.allFile.edges[0].node}\n      context={{ ...pageContext, ...data, location }}\n    />\n  )\n}\n\nexport default PhotoTemplate\n\nexport const pageQuery = graphql`\n  query PhotoBySlug($id: String!) {\n    site {\n      siteMetadata {\n        title\n        author {\n          name\n        }\n      }\n    }\n    allFile(filter: { id: { eq: $id } }) {\n      edges {\n        node {\n          id\n          dir\n          absolutePath\n          publicURL\n          childImageExt {\n            metadata\n            tinyImg\n            smallImg\n          }\n          fields {\n            slug\n            url\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}